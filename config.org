#+TITLE: My Emacs Config
#+AUTHOR: Lokesh Mohanty
#+PROPERTY: header-args:emacs-lisp :tangle init.el

CHEATSHEET: [[file:cheatsheet.pdf][./cheatsheet.pdf]]

* INITIALIZE DEBUGGING

Enable Debugging before execution of the config and disable after execution. 
Taken from [[https://jonathanabennett.github.io/blog/2019/05/28/emacs.org-~-may-2019/][Jonathan Bennett's Emacs.org]]

#+begin_src emacs-lisp

  ;; Required for functions that return functions ( used by custom function to filter tags in org-roam )
  ;; -*- lexical-binding: t; -*-

  (setq debug-on-error t)
  (setq debug-on-quit t)

  ;; (defconst emacs-start-time (current-time))

#+end_src

* STARTUP PERFORMANCE
** Reduce Garbage Collection Frequency

Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time.

Also, turn on =lexical-binding= for the init file!

#+begin_src emacs-lisp

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))

#+end_src

*** Garbage Collection

Reduce the frequency of garbage collection

#+begin_src emacs-lisp
  ;; Using garbage magic hack.
  ;; (use-package gcmh
  ;;   :config
  ;;   (gcmh-mode 1))
  ;; ;; Setting garbage collection threshold
  ;; (setq gc-cons-threshold 402653184
  ;;       gc-cons-percentage 0.6)

  ;; ;; Profile emacs startup
  ;; (add-hook 'emacs-startup-hook
  ;;           (lambda ()
  ;;             (message "*** Emacs loaded in %s with %d garbage collections."
  ;;                      (format "%.2f seconds"
  ;;                              (float-time
  ;;                               (time-subtract after-init-time before-init-time)))
  ;;                      gcs-done)))

  ;; Silence compiler warnings as they can be pretty disruptive (setq comp-async-report-warnings-errors nil)
#+end_src

Decrease garbase collection thresold to increase frequency but decrease the total time taken.
It increases runtime performance

#+begin_src emacs-lisp
  ;; Make gc pauses faster by decreasing the threshold.
  ;; (setq gc-cons-threshold (* 2 1000 1000))
#+end_src

** Native Compilation

I've started experimenting with the =native-comp= branch of Emacs for increased performance.  Here are some settings to tweak the behavior slightly:

#+begin_src emacs-lisp

  ;; Silence compiler warnings as they can be pretty disruptive
  ;; (setq native-comp-async-report-warnings-errors nil)

  ;; ;; Set the right directory to store the native comp cache
  ;; (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))

#+end_src

*** Native Compile

#+begin_src emacs-lisp
  ;; ;; Silence compiler warnings as they can be pretty disruptive
  ;; ;; (setq native-comp-deferred-compilation-deny-list nil)
  ;; (if (boundp 'comp-deferred-compilation)
  ;;     (setq comp-deferred-compilation nil)
  ;;   (setq native-comp-deferred-compilation nil))
  ;; ;; In noninteractive sessions, prioritize non-byte-compiled source files to
  ;; ;; prevent the use of stale byte-code. Otherwise, it saves us a little IO time
  ;; ;; to skip the mtime checks on every *.elc file.
  ;; (setq load-prefer-newer noninteractive)
#+end_src

* PROGRAMS TO LOAD FIRST
** Package Management with Straight

- Clean up unused repos with =straight-remove-unused-repos=
 
- [[https://github.com/jwiegley/use-package][Use package]] information

| Keyword   | Remarks                                                                             |
|-----------+-------------------------------------------------------------------------------------|
| =:init=     | execute code before package loads                                                   |
| =:config=   | execute code after package loads                                                    |
| =:commands= | creates autoloads for the commands and defers loading of module until they are used |
| =:bind=     | shortcut for adding to =:commands= and creating a keybinding at =:init=                 |
| =:demand=   | force loads ignoring =:bind= and =:commands=                                            |
| =:delight=  | hide mode name from mode-line                                                       |

#+begin_src emacs-lisp

  ;; (setq package-enable-at-startup nil)

  ;; Bootstrap straight.el
  (defvar bootstrap-version)
  (setq straight-repository-branch "develop")
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Always use straight to install on systems other than Linux
  (setq straight-use-package-by-default t)

  ;; Use straight.el for use-package expressions
  (straight-use-package 'use-package)

#+end_src

** Use custom.el to for emacs custom configuration

#+begin_src emacs-lisp

  ;; call it early to prevent use of built-in org mode
  (use-package org
    :straight org-contrib)

  ;; (org-babel-load-file
  ;;  (expand-file-name
  ;;   "config.org"
  ;;   user-emacs-directory))

  ;; Required if using package.el
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))

#+end_src

** Don't place autosave files in the same directory as the actual file

#+begin_src emacs-lisp

  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src

** Update path to bash environment path

This sources ="~/.bashrc"= and then sets the path
#+begin_src emacs-lisp

  (let ((path (shell-command-to-string "source <(grep -v bind ~/.bashrc); echo -n $PATH")))
    (setenv "PATH" path)
    (setq exec-path
          (append
           (split-string-and-unquote path ":")
           exec-path)))
#+end_src

* GRAPHICAL USER INTERFACE SETTINGS
** Disable Menubar, Toolbars and Scrollbars

#+begin_src emacs-lisp

  (menu-bar-mode -1)          ; Disable the menu bar
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  ;; (set-fringe-mode 10)        ; Give some breathing room

#+end_src

** Display Line Numbers and Truncated Lines

#+begin_src emacs-lisp

  (column-number-mode)
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(vterm-mode-hook
                  treemacs-mode-hook
                  erc-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Scrolling

#+begin_src emacs-lisp

  (setq scroll-conservatively 101) ;; value greater than 100 gets rid of half page jumping
  (setq mouse-wheel-scroll-amount '(3 ((shift) . 3))) ;; how many lines at a time
  (setq mouse-wheel-progressive-speed t) ;; accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

  ;; (setq scroll-step 1)
  ;; (setq redisplay-dont-pause t)

#+end_src

** Theme

You can test themes by using the counsel-load-theme.
#+begin_src emacs-lisp

  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-gruvbox t)
    (doom-themes-org-config))

#+end_src

** Fonts

#+begin_src emacs-lisp

  ;; Fonts
  ;; condition-case is used to ignore error if font not found
  (condition-case nil
    ;; (set-frame-font "Inconsolata 11" nil t) ;; Doesn't have italic font
    (set-frame-font "Source Code Pro 10" nil t)
    ;; (set-frame-font "Mononoki 12" nil t)
    ;; (set-frame-font "Fantasque Sans 12" nil t)
  (error nil))

  ;; Makes commented text and keywords italics.
  ;; This is working in emacsclient but not emacs.
  ;; Your font must have an italic face available.
  (set-face-attribute 'font-lock-comment-face nil
                      :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
                      :slant 'italic)

  ;; Uncomment the following line if line spacing needs adjusting.
  (setq-default line-spacing 0.12)

  ;; Needed if using emacsclient. Otherwise, your fonts will be smaller than expected.
  ;;(add-to-list 'default-frame-alist '(font . "Inconsolata-11"))
  ;; changes certain keywords to symbols, such as lamda!
  (setq global-prettify-symbols-mode t)
#+end_src

** Icons

Icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.

#+begin_src emacs-lisp

  (use-package all-the-icons
    :if (display-graphic-p)
    :commands all-the-icons-install-fonts
    :config (unless (find-font (font-spec :name "all-the-icons"))
              (all-the-icons-install-fonts t)))

#+end_src

** Change Modeline To Doom's Modeline
#+begin_src emacs-lisp

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 25)) ;; lower height messes up the text vertical alignment
    )

  ;; Decrease modeline font height
  (set-face-attribute 'mode-line nil :height 100)
  (set-face-attribute 'mode-line-inactive nil :height 100)

#+end_src

** Auto update buffers on file changes

#+begin_src emacs-lisp

  (global-auto-revert-mode)
  
#+end_src

* KEY BINDINGS
** Helpful Default Keybindings

| Key   | Function                       |
|-------+--------------------------------|
| =C-h i= | User guide important modes     |
| =C-h r= | User Manual                    |
| =C-h a= | Apropos related to a command   |
| =C-h d= | Apropos for a specific keyword |
| =C-h k= | Describe key                   |
| =C-h v= | Describe variable              |
| =C-h f= | Describe function              |
| =C-h o= | Describe symbol                |
| =C-h b= | Describe bindings              |
| =C-h m= | Describe modes                 |
| =C-h P= | Describe Package               |
|-------+--------------------------------|
| =C-g=   | Kill minibuffer                |

** Install general.el to define keybindings

Use =general-define-key= to remap/map evil keybindings

#+begin_src emacs-lisp

  ;; (general-define-key
  ;;   :states 'normal
  ;;   :mode evil-vimish-fold-mode
  ;;   "zF" 'vimish-fold-avy)

#+end_src

#+begin_src emacs-lisp
      (use-package general
        :config
        (general-create-definer my/leader-keys
          :keymaps '(normal insert visual emacs)
          :prefix "SPC"
          :global-prefix "M-SPC")

        (general-create-definer my/ctrl-c-keys
          :prefix "C-c")

        (general-evil-setup t)

        ;; general-simulate-key should not be quoted as it is supposed to be evaluated before assigning
        (my/leader-keys
          ;; "SPC" '(counsel-M-x :which-key "M-x")
          "."    '(find-file :which-key "find file")
          "SPC"  (general-simulate-key "M-x" :which-key "M-x") 
          "r"    (general-simulate-key "C-x r" :which-key "+register/bookmark") ;; run bookmark-save to save bookmarks to a file
          "t"    (general-simulate-key "C-x t" :which-key "+tab")
          "p"    (general-simulate-key "C-x p" :which-key "+project")
          "f"    (general-simulate-key "C-x 5" :which-key "+frame")
          "o"    '(:ignore t :which-key "open")
          "oa"   '(org-agenda :which-key "org-agenda")
          "oc"   '(org-capture :which-key "org-capture")
          "om"   '(mu4e :which-key "mu4e")
          "oe"   '(eshell :which-key "eshell")
          "op"   '(prodigy :which-key "prodigy")
          "ot"   '(vterm :which-key "vterm")
          "oy"   '(yas-insert-snippet :which-key "insert snippet")
          "hrr" '((lambda () (interactive) (load-file "~/.emacs.d/init.el")) :which-key "Reload emacs config")
          "hpc" '(lambda () (interactive) (find-file (expand-file-name "~/.emacs.d/config.org")) :which-key "Goto emacs config"))
        )

#+end_src

** Buffer

#+begin_src emacs-lisp

  ;; currently trying it instead of ibuffer
  ;; (use-package bufler
  ;;   ;; :disabled
  ;;   :after (evil evil-collection)
  ;;   :bind (("C-M-j" . bufler-switch-buffer)
  ;;         ("C-M-k" . bufler-workspace-frame-set))
  ;;  :config
  ;;  (evil-collection-define-key 'normal 'bufler-list-mode-map
  ;;    (kbd "RET")   'bufler-list-buffer-switch
  ;;    (kbd "M-RET") 'bufler-list-buffer-peek
  ;;    "D"           'bufler-list-buffer-kill)
  ;;   )

  (use-package ibuffer
    :straight (:type built-in)
    :config
    ;; (setq ibuffer-saved-filter-groups
    ;;       '(("home"
    ;;   ("emacs-config" (or (filename . ".emacs.d")
    ;;           (filename . "emacs-config")))
    ;;         ("martinowen.net" (filename . "martinowen.net"))
    ;;   ("Org" (or (mode . org-mode)
    ;;         (filename . "OrgMode")))
    ;;         ("code" (filename . "code"))
    ;;   ("Web Dev" (or (mode . html-mode)
    ;;       (mode . css-mode)))
    ;;   ("Subversion" (name . "\*svn"))
    ;;   ("Magit" (name . "\*magit"))
    ;;   ("ERC" (mode . erc-mode))
    ;;   ("Help" (or (name . "\*Help\*")
    ;;         (name . "\*Apropos\*")
    ;;         (name . "\*info\*"))))))
    (setq ibuffer-expert t)
    (setq ibuffer-show-empty-filter-groups nil))

    (my/leader-keys
      "b"     '(:ignore t :which-key "buffer")
      "b b"   '(ibuffer :which-key "ibuffer")
      "b o"   '(ibuffer-other-window :which-key "ibuffer in other window")
      ;; "b b"   '(bufler :which-key "buffer list")
      ;; "b s"   '(switch-to-buffer :which-key "switch buffer")
      "b s"   '(consult-buffer :which-key "switch buffer")
      "b f"   '(consult-buffer-other-frame :which-key "open buffer in other frame")
      "b w"   '(consult-buffer-other-window :which-key "open buffer in other window")
      "b c"   '(clone-indirect-buffer-other-window :which-key "Clone buffer in other window")
      "b k"   '(kill-current-buffer :which-key "Kill current buffer")
      "b n"   '(next-buffer :which-key "Next buffer")
      "b p"   '(previous-buffer :which-key "Previous buffer")
      "b B"   '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
      "b K"   '(kill-buffer :which-key "Kill buffer"))

#+end_src

** File

#+begin_src emacs-lisp

  ;; (my/leader-keys
  ;;   "."     '(find-file :which-key "Find file")
  ;;   "f"     '(:ignore t :which-key "file")
  ;;   "f f"   '(find-file :which-key "Find file")
  ;;   "f r"   '(counsel-recentf :which-key "Recent files")
  ;;   "f s"   '(save-buffer :which-key "Save file")
  ;;   "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
  ;;   "f C"   '(copy-file :which-key "Copy file")
  ;;   "f D"   '(delete-file :which-key "Delete file")
  ;;   "f R"   '(rename-file :which-key "Rename file")
  ;;   "f S"   '(write-file :which-key "Save file as...")
  ;;   "f U"   '(sudo-edit :which-key "Sudo edit file"))

#+end_src

** Window

| Command                             | Key        | Description                                      |
|-------------------------------------+------------+--------------------------------------------------|
| =shrink-window-horizontally=          | ~C-x {~      | Make the window smaller horizontally             |
| =enlarge-window-horizontally=         | ~C-x }~      | Make the window bigger horizontally              |
| =shrink-window=                       | None!      | Shrink the window vertically                     |
| =shrink-window-if-larger-than-buffer= | ~C-x -~      | Shrink the window vertically to buffer           |
| =dired-other-window=                  | ~C-x 4 d~    | Open Dired in another window                     |
| =dired-jump-other-window=             | ~C-x 4 j~    | Open Dired in another window at location of file |
| =scroll-other-window=                 | ~M-pgdn~     | Scroll the other window down without focusing it |
| =scroll-other-window-down=            | ~M-pgup~     | Scroll the other window up without focusing it   |
|-------------------------------------+------------+--------------------------------------------------|
| =evil-window-delete=                  | ~C-w C-c~    | Close the current window                         |
| =delete-other-windows=                | ~C-w C-o~    | Close all other windows                          |
| =evil-window-split=                   | ~C-w C-s~    | Split the current window horizontally            |
| =evil-window-vsplit=                  | ~C-w C-v~    | Split the current window vertically              |
| =evil-window-set-width=               | ~C-w (pipe)~ | Use numeric prefix to set window width           |
| =evil-window-set-height=              | ~C-w _~      | Use numeric prefix to set window height          |
| =balance-windows=                     | ~C-w =~      | Balance the sizes of all windows                 |
| =evil-window-next=                    | ~C-w C-w~    | Select the next visible window                   |
| =evil-window-prev=                    | ~C-w W~      | Select the previous visible window               |
| =ffap-other-window=                   | ~C-w C-f~    | Open a file in another window                    |
| =evil-window-left=                    | ~C-w h~      |                                                  |
| =evil-window-right=                   | ~C-w l~      |                                                  |
| =evil-window-up=                      | ~C-w k~      |                                                  |
| =evil-window-down=                    | ~C-w j~      |                                                  |

*TIP*: You can use a numeric argument before running =evil-window-set-width= and =evil-window-set-height= to specify the desired size of the window.


C-w -> Prefix for evil window commands

- ace-window
    x - delete window
    m - swap windows
    M - move window
    c - copy window
    j - select buffer
    n - select the previous window
    u - select buffer in the other window
    c - split window fairly, either vertically or horizontally
    v - split window vertically
    b - split window horizontally
    o - maximize current window
    ? - show these command bindings

#+begin_src emacs-lisp

  (use-package ace-window
    :config
    (global-set-key (kbd "M-o") 'ace-window)
    :custom
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (aw-scope 'frame)
    (aw-dispatch-always t))

  (use-package winner-mode
    :straight (:type built-in)
    :bind (:map evil-window-map
                ("u" . winner-undo)
                ("C-u" . winner-redo))
    :config
    (winner-mode))

  (my/leader-keys
    "w"     '(:ignore t :which-key "window")
    "w c"   '(evil-window-delete :which-key "Close window")
    "w n"   '(evil-window-new :which-key "New window")
    "w s"   '(evil-window-split :which-key "Horizontal split window")
    "w v"   '(evil-window-vsplit :which-key "Vertical split window")
    ;; Window motions
    "w h"   '(evil-window-left :which-key "Window left")
    "w j"   '(evil-window-down :which-key "Window down")
    "w k"   '(evil-window-up :which-key "Window up")
    "w l"   '(evil-window-right :which-key "Window right")
    "w w"   '(evil-window-next :which-key "Goto next window")
    )

#+end_src

#+begin_src emacs-lisp

  ;; If a popup does happen, don't resize windows to be equal-sized
  (setq even-window-sizes nil)

#+end_src

** Popups

#+begin_src emacs-lisp

  ;; Returns the parent directory containing a .project file, if any,
  ;; to override the standard project detection logic when needed.
  (defun my-project-override (dir)
    (let ((override (locate-dominating-file dir ".project")))
      (if override
          (cons 'vc override)
        nil)))

  (use-package project
    ;; Cannot use :hook because 'project-find-functions does not end in -hook
    :config
    (add-hook 'project-find-functions #'my-project-override))

  (use-package popper
    :straight (popper :host github
                      :repo "karthink/popper"
                      :build (:not autoloads))
    ;; :commands popper-mode
    :bind (("M-'" . popper-toggle-latest)
           ("C-'" . popper-cycle)
           ("C-M-'" . popper-toggle-type))
    :config
    (setq popper-mode-line nil)      

    :custom
    (popper-window-height 15)
    (popper-group-function #'popper-group-by-project)
    (popper-reference-buffers
     '("\\*Async Shell Command\\*"
       ;; +occur-grep-modes-list
       ;; +man-modes-list
       ;; messages-buffer-mode
       ;; "^\\*Warnings\\*$"
       ;; "^\\*Compile-Log\\*$"
       ;; "^\\*Matlab Help\\*"
       ;; "^\\*Messages\\*$"
       ;; "^\\*Backtrace\\*"
       ;; "^\\*evil-registers\\*"
       ;; "^\\*Apropos"
       ;; "^Calc:"
       ;; "^\\*TeX errors\\*"
       ;; "^\\*ielm\\*"
       ;; "^\\*TeX Help\\*"
       ;; "\\*Shell Command Output\\*"
       ;; "\\*Completions\\*"
       ;; "\\*scratch\\*"
       ;; "[Oo]utput\\*"
       ;; special-mode
       vterm-mode
       shell-mode
       eshell-mode
       apropos-mode
       help-mode
       helpful-mode
       compilation-mode))
    :init
    ;; Needed because I disabled autoloads
    (require 'popper)
    (popper-mode 1))


#+end_src

** Tab
Basic Usage

- =tab-bar-mode= - Enable display of the tab bar
- =tab-new= (~C-x t 2~) - Create a new tab
- =tab-next= (~C-x t o~, evil: ~g t~) - Move to the next tab (also known as =tab-bar-switch-to-next-tab=)
- =tab-bar-switch-to-prev-tab= (evil: ~g T~) - Switch to the previous tab
- =tab-rename= (~C-x t r~) - Rename the current tab (or numbered tab with prefix arg)
- =tab-close= (~C-x t 0~) - Close the current tab
- =tab-close-other= (~C-x t 1~) - Close other tabs
- =tab-bar-undo-close-tab= - Reopen the last closed tab
- =tab-move= (~C-x t m~) - Move the current tab to the right (or left with negative prefix)
- =tab-bar-select-tab-by-name= (~C-x t RET~) - Select tab by name using completion

  Configuring operation

- =tab-bar-new-tab-choice= - The name of a buffer or file to display in new tabs
- =tab-bar-new-tab-to= - Where to place new tabs (left or right of current) - Also a function!
- =tab-bar-tab-name-function= - Control how new tabs are named (can prompt for a name!)

  #+begin_src emacs-lisp

    ;; (setq tab-bar-new-tab-choice "*scratch*")

  #+end_src

  Configuring tab-bar appearance

  - =tab-bar-close-button-show= - Show or hide the close button
  - =tab-bar-new-button-show= - Show or hide the new button at the end
  - =tab-bar-button-relief= - Control pixel width of tab bar button appearance

  - =tab-bar= face - customize text of tabs
  - =tab-bar-tab= face - customize the color of the active tab
  - =tab-bar-tab-inactive= face - customize the color of inactive tabs

    #+begin_src emacs-lisp

      ;; (setq tab-bar-close-button-show nil
      ;;       tab-bar-new-button-show nil 
      ;;       ;; tab-bar-separator " | "
      ;;       ;; tab-bar-button-relief 10
      ;;       ;; tab-bar-button-margin 10
      ;;       )

    #+end_src

    Using tab-bar-mode without showing the bar

    #+begin_src emacs-lisp

      ;; Don't turn on tab-bar-mode when tabs are created
      ;; (setq tab-bar-show nil)

      ;; ;; Get the current tab name for use in some other display
      ;; (defun efs/current-tab-name ()
      ;;   (alist-get 'name (tab-bar--current-tab)))

    #+end_src

** Register

#+begin_src emacs-lisp

  ;; (nvmap :prefix "SPC"
  ;;   "r c"   '(copy-to-register :which-key "Copy to register")
  ;;   "r f"   '(frameset-to-register :which-key "Frameset to register")
  ;;   "r i"   '(insert-register :which-key "Insert register")
  ;;   "r j"   '(jump-to-register :which-key "Jump to register")
  ;;   "r l"   '(list-registers :which-key "List registers")
  ;;   "r n"   '(number-to-register :which-key "Number to register")
  ;;   "r r"   '(counsel-register :which-key "Choose a register")
  ;;   "r v"   '(view-register :which-key "View a register")
  ;;   "r w"   '(window-configuration-to-register :which-key "Window configuration to register")
  ;;   "r +"   '(increment-register :which-key "Increment register")
  ;;   "r SPC" '(point-to-register :which-key "Point to register"))

#+end_src

** Zooming In and Out

#+begin_src emacs-lisp

  ;; (global-set-key (kbd "C-=") 'text-scale-increase)
  ;; (global-set-key (kbd "C--") 'text-scale-decrease)
  ;; (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  ;; (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)

#+end_src

* EVIL MODE

Extensible Vi layer for Emacs

Setup evil mode to use vim like keybindings
#+begin_src emacs-lisp

  (use-package evil
    :after general
    :init      ;; config before the package loads
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    ;; (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode)
    (bind-keys* ("M-f" . evil-normal-state))
    (general-define-key
      :states '(insert visual normal)
      "M-f" 'evil-normal-state)

    ;; Use visual line motions even outside of visual-line-mode buffers(replacement for gj, gk)
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'erc-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  ;; (with-eval-after-load 'org
  ;;   (define-key org-mode-map (kbd "M-f") 'evil-normal-state))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

#+begin_src emacs-lisp
  (use-package evil-commentary
    :config
    (evil-commentary-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))
#+end_src

* HELPFUL

#+begin_src emacs-lisp

  (use-package helpful
    :commands (helpful-at-point
              helpful-callable
              helpful-command
              helpful-function
              helpful-key
              helpful-macro
              helpful-variable)
    :bind
    ([remap display-local-help] . helpful-at-point)
    ([remap describe-function] . helpful-callable)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-key] . helpful-key)
    ([remap describe-command] . helpful-command))

#+end_src

* WHICH KEY
  
Minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup.

#+begin_src emacs-lisp

  (use-package which-key
    :defer 0.2
    :delight
    ;; :diminish
    :custom (which-key-idle-delay 0.5)
    :config (which-key-mode))

#+end_src

* Hydra

GNU Emacs has so many commands per mode that it is tedious to remember all the
keybindings for quick access.  Fortunately, [[https://github.com/abo-abo/hydra][hydra]] allows you to create menu
commands and on the basis of a popup, display the commands you have associated
with it.

#+begin_src emacs-lisp
  (use-package hydra
    :bind (("C-c I" . hydra-image/body)
           ("C-c L" . hydra-ledger/body)
           ("C-c M" . hydra-merge/body)
           ("C-c T" . hydra-tool/body)
           ("C-c b" . hydra-btoggle/body)
           ("C-c c" . hydra-clock/body)
           ("C-c e" . hydra-erc/body)
           ("C-c f" . hydra-flycheck/body)
           ("C-c g" . hydra-go-to-file/body)
           ("C-c m" . hydra-magit/body)
           ;; ("C-c o" . hydra-org/body)
           ("C-c o" . hydra-org-download/body)
           ("C-c s" . hydra-spelling/body)
           ("C-c t" . hydra-tex/body)
           ("C-c u" . hydra-upload/body)
           ("C-c N" . hydra-notes/body)
           ("C-c w" . hydra-windows/body)))

  (use-package major-mode-hydra
    :after hydra
    :preface
    (defun with-alltheicon (icon str &optional height v-adjust face)
      "Display an icon from all-the-icon."
      (s-concat (all-the-icons-alltheicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-faicon (icon str &optional height v-adjust face)
      "Display an icon from Font Awesome icon."
      (s-concat (all-the-icons-faicon icon ':v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-fileicon (icon str &optional height v-adjust face)
      "Display an icon from the Atom File Icons package."
      (s-concat (all-the-icons-fileicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-octicon (icon str &optional height v-adjust face)
      "Display an icon from the GitHub Octicons."
      (s-concat (all-the-icons-octicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str)))
#+end_src

** Hydra / Org Download

#+begin_src emacs-lisp

  (pretty-hydra-define hydra-org-download
    (:hint nil :color teal :quit-key "q" :title (with-fileicon "org" "Org Download" 1 -0.05))
    ("Action"
     (("c" org-download-clipboard "Capture the image from the clipboard and insert the resulting file")
      ("d" org-download-delete "Delete inline image link on current line, and the file that it points to")
      ("d" org-download-edit "Open the image at point for editing.")
      ("i" org-download-image "Save image at address LINK to ‘org-download--dir’.")
      ("p" org-download-rename-at-point "Rename image at point.")
      ("f" org-download-rename-last-file "Rename the last downloaded file saved in your computer.")
      ("s" org-download-screenshot "Capture screenshot and insert the resulting file.")
      ("y" org-download-yank "Call ‘org-download-image’ with current kill."))))

#+end_src

** Hydra / BToggle

Group a lot of commands.

#+begin_src emacs-lisp

  (pretty-hydra-define hydra-btoggle
    (:hint nil :color amaranth :quit-key "q" :title (with-faicon "toggle-on" "Toggle" 1 -0.05))
    ("Basic"
     (("a" abbrev-mode "abbrev" :toggle t)
      ("h" global-hungry-delete-mode "hungry delete" :toggle t))
     "Coding"
     (("e" electric-operator-mode "electric operator" :toggle t)
      ("F" flyspell-mode "flyspell" :toggle t)
      ("f" flycheck-mode "flycheck" :toggle t)
      ("l" lsp-mode "lsp" :toggle t)
      ("s" smartparens-mode "smartparens" :toggle t))
     "UI"
     (("i" ivy-rich-mode "ivy-rich" :toggle t))))

#+end_src

** Hydra / ERC

#+begin_src emacs-lisp

  (pretty-hydra-define hydra-erc
    (:hint nil :color teal :quit-key "q" :title (with-faicon "comments-o" "ERC" 1 -0.05))
    ("Action"
     (("c" erc "connect")
      ("d" erc-quit-server "disconnect")
      ("j" erc-join-channel "join")
      ("n" erc-channel-names "names")
      ("t" erc-tls "connect with tls/ssl")
      ("r" my/connect-irc "connect me"))))

#+end_src

** Hydra / Clock

Group clock commands.

#+begin_src emacs-lisp

  (pretty-hydra-define hydra-clock
    (:hint nil :color teal :quit-key "q" :title (with-faicon "clock-o" "Clock" 1 -0.05))
    ("Action"
     (("c" org-clock-cancel "cancel")
      ("d" org-clock-display "display")
      ("e" org-clock-modify-effort-estimate "effort")
      ("i" org-clock-in "in")
      ("j" org-clock-goto "jump")
      ("o" org-clock-out "out")
      ("p" org-pomodoro "pomodoro")
      ("r" org-clock-report "report"))))

#+end_src

** Hydra / Flycheck

Group Flycheck commands.

#+begin_src emacs-lisp

  (pretty-hydra-define hydra-flycheck
    (:hint nil :color teal :quit-key "q" :title (with-faicon "plane" "Flycheck" 1 -0.05))
    ("Checker"
     (("?" flycheck-describe-checker "describe")
      ("d" flycheck-disable-checker "disable")
      ("m" flycheck-mode "mode")
      ("s" flycheck-select-checker "select"))
     "Errors"
     (("<" flycheck-previous-error "previous" :color pink)
      (">" flycheck-next-error "next" :color pink)
      ("f" flycheck-buffer "check")
      ("l" flycheck-list-errors "list"))
     "Other"
     (("M" flycheck-manual "manual")
      ("v" flycheck-verify-setup "verify setup"))))

#+end_src

** Hydra / Go To

Group jump-to-files commands.

#+begin_src emacs-lisp

  (pretty-hydra-define hydra-go-to-file
    (:hint nil :color teal :quit-key "q" :title (with-octicon "file-symlink-file" "Go To" 1 -0.05))
    ("Agenda"
     (("ac" (find-file "~/.personal/agenda/contacts.org") "contacts")
      ("ah" (find-file "~/.personal/agenda/home.org") "home")
      ("ai" (find-file "~/.personal/agenda/inbox.org") "inbox")
      ("ap" (find-file "~/.personal/agenda/people.org") "people")
      ("ar" (find-file "~/.personal/agenda/routine.org") "routine")
      ("aw" (find-file "~/.personal/agenda/work.org") "work"))
     "Config"
     (("ca" (find-file (format "%s/alacritty/alacritty.yml" xdg-config)) "alacritty")
      ("cA" (find-file (format "%s/sh/aliases" xdg-config)) "aliases")
      ("ce" (find-file "~/.emacs.d/config.org") "emacs")
      ("cE" (find-file (format "%s/sh/environ" xdg-config)) "environ")
      ("cn" (find-file (format "%s/neofetch/config.conf" xdg-config)) "neofetch")
      ("cq" (find-file (format "%s/qutebrowser/config.py" xdg-config)) "qutebrowser")
      ("cr" (find-file (format "%s/ranger/rc.conf" xdg-config)) "ranger")
      ("cs" (find-file (format "%s/sway/config" xdg-config)) "sway")
      ("ct" (find-file (format "%s/tmux/tmux.conf" xdg-config)) "tmux")
      ("cw" (find-file (format "%s/waybar/config" xdg-config)) "waybar")
      ("cW" (find-file (format "%s/wofi/config" xdg-config)) "wofi")
      ("cx" (find-file (format "%s/sh/xdg" xdg-config)) "xdg"))
     "Notes"
     (("na" (find-file (format "~/.personal/notes/affirmations.pdf" xdg-config)) "Affirmations"))
     "Other"
     (("ob" (find-file "~/.personal/other/books.org") "book")
      ("ol" (find-file "~/.personal/other/long-goals.org") "long-terms goals")
      ("om" (find-file "~/.personal/other/movies.org"))
      ("op" (find-file "~/.personal/other/purchases.org") "purchase")
      ("os" (find-file "~/.personal/other/short-goals.org") "short-terms goals")
      ("ou" (find-file "~/.personal/other/usb.org") "usb")
      ("oL" (find-file "~/.personal/other/learning.org") "learning"))))

#+end_src

** Hydra / Image

Group images commands.

#+begin_src emacs-lisp

  (pretty-hydra-define hydra-image
    (:hint nil :color pink :quit-key "q" :title (with-faicon "file-image-o" "Images" 1 -0.05))
    ("Action"
     (("r" image-rotate "rotate")
      ("s" image-save "save" :color teal))
      "Zoom"
      (("-" image-decrease-size "out")
       ("+" image-increase-size "in")
       ("=" image-transform-reset "reset"))))

#+end_src

** Hydra / Ledger

Group Ledger commands.

#+begin_src emacs-lisp

  (pretty-hydra-define hydra-ledger
    (:hint nil :color teal :quit-key "q" :title (with-faicon "usd" "Ledger" 1 -0.05))
    ("Action"
     (("b" ledger-add-transaction "add")
      ("c" ledger-mode-clean-buffer "clear")
      ("i" ledger-copy-transaction-at-point "copy")
      ("s" ledger-delete-current-transaction "delete")
      ("r" ledger-report "report"))))

#+end_src

** Hydra / Magit

Group Magit commands.

#+begin_src emacs-lisp

  (pretty-hydra-define hydra-magit
    (:hint nil :color teal :quit-key "q" :title (with-octicon "mark-github" "Magit" 1 -0.05))
    ("Action"
     (("b" magit-blame "blame")
      ("c" magit-clone "clone")
      ("i" magit-init "init")
      ("l" magit-log-buffer-file "commit log (current file)")
      ("L" magit-log-current "commit log (project)")
      ("s" magit-status "status"))))

#+end_src

** Hydra / Merge

Group Merge commands.

#+begin_src emacs-lisp

  (pretty-hydra-define hydra-merge
    (:hint nil :color pink :quit-key "q" :title (with-octicon "mark-github" "Magit" 1 -0.05))
    ("Move"
     (("n" smerge-next "next")
      ("p" smerge-prev "previous"))
     "Keep"
     (("RET" smerge-keep-current "current")
      ("a" smerge-keep-all "all")
      ("b" smerge-keep-base "base")
      ("l" smerge-keep-lower "lower")
      ("u" smerge-keep-upper "upper"))
     "Diff"
     (("<" smerge-diff-base-upper "upper/base")
      ("=" smerge-diff-upper-lower "upper/lower")
      (">" smerge-diff-base-lower "base/lower")
      ("R" smerge-refine "redefine")
      ("E" smerge-ediff "ediff"))
     "Other"
     (("C" smerge-combine-with-next "combine")
      ("r" smerge-resolve "resolve")
      ("k" smerge-kill-current "kill current"))))

#+end_src

** Hydra / Org

Group Org commands.

#+begin_src emacs-lisp

  ;; ;; Configure leader key
  ;; (evil-leader/set-key-for-mode 'org-mode
  ;;   "." 'hydra-org-state/body
  ;;   "t" 'org-todo
  ;;   "T" 'org-show-todo-tree
  ;;   "v" 'org-mark-element
  ;;   "a" 'org-agenda
  ;;   "c" 'org-archive-subtree
  ;;   "l" 'evil-org-open-links
  ;;   "C" 'org-resolve-clocks)

  (pretty-hydra-define hydra-org
    (:hint nil :color teal :quit-key "q" :title (with-fileicon "org" "Org" 1 -0.05))
    ("Action"
     (("A" my/org-archive-done-tasks "archive")
      ("a" org-agenda "agenda")
      ("c" org-capture "capture")
      ("d" org-decrypt-entry "decrypt")
      ("i" org-insert-link-global "insert-link")
      ("j" my/org-jump "jump-task")
      ("k" org-cut-subtree "cut-subtree")
      ("o" org-open-at-point-global "open-link")
      ("r" org-refile "refile")
      ("s" org-store-link "store-link")
      ("t" org-show-todo-tree "todo-tree"))))

  (defhydra hydra-org-state ()
    ;; basic navigation
    ("i" org-cycle)
    ("I" org-shifttab)
    ;; ("h" org-up-element)
    ;; ("l" org-down-element)
    ;; ("j" org-forward-element)
    ;; ("k" org-backward-element)
    ;; navigating links
    ("n" org-next-link)
    ("p" org-previous-link)
    ("o" org-open-at-point)
    ;; navigation blocks
    ("N" org-next-block)
    ("P" org-previous-block)
    ;; updates
    ("." org-ctrl-c-ctrl-c)
    ("*" org-ctrl-c-star)
    ("-" org-ctrl-c-minus)
    ;; change todo state
    ("H" org-shiftleft)
    ("L" org-shiftright)
    ("J" org-shiftdown)
    ("K" org-shiftup)
    ("t" org-todo))

#+end_src

** Hydra / Roam

Group =org-roam= commands.

#+begin_src emacs-lisp

  (pretty-hydra-define hydra-notes
    (:hint nil :color teal :quit-key "q" :title (with-octicon "pencil" "Notes" 1 -0.05))
    ("Notes"
     (("c" org-roam-dailies-capture-today "capture")
      ("C" org-roam-dailies-capture-tomorrow "capture tomorrow")
      ("g" org-roam-graph "graph")
      ("f" org-roam-node-find "find")
      ("i" org-roam-node-insert "insert"))
     "Go To"
     ((">" org-roam-dailies-goto-next-note "next note")
      ("<" org-roam-dailies-goto-previous-note "previous note")
      ("d" org-roam-dailies-goto-date "date")
      ("t" org-roam-dailies-goto-today "today")
      ("T" org-roam-dailies-goto-tomorrow "tomorrow")
      ("y" org-roam-dailies-goto-yesterday "yesterday"))))

#+end_src

** Hydra / Spelling

Group spelling commands.

#+begin_src emacs-lisp

  (pretty-hydra-define hydra-spelling
    (:hint nil :color teal :quit-key "q" :title (with-faicon "magic" "Spelling" 1 -0.05))
    ("Checker"
     (("c" langtool-correct-buffer "correction")
      ("C" langtool-check-done "clear")
      ("d" ispell-change-dictionary "dictionary")
      ("l" (message "Current language: %s (%s)" langtool-default-language ispell-current-dictionary) "language")
      ("s" my/switch-language "switch")
      ("w" wiki-summary "wiki"))
     "Errors"
     (("<" flyspell-correct-previous "previous" :color pink)
      (">" flyspell-correct-next "next" :color pink)
      ("f" langtool-check "find"))))

#+end_src

** Hydra / TeX

Group TeX commands.

#+begin_src emacs-lisp

  (pretty-hydra-define hydra-tex
    (:hint nil :color teal :quit-key "q" :title (with-fileicon "tex" "LaTeX" 1 -0.05))
    ("Action"
     (("g" reftex-goto-label "goto")
      ("r" reftex-query-replace-document "replace")
      ("s" counsel-rg "search")
      ("t" reftex-toc "table of content"))))

#+end_src

** Hydra / Tool

Group Tool commands.

#+begin_src emacs-lisp

  (pretty-hydra-define hydra-tool
    (:hint nil :color teal :quit-key "q" :title (with-faicon "briefcase" "Tool" 1 -0.05))
    ("Network"
     (("c" ipcalc "subnet calculator")
      ("i" ipinfo "ip info"))))

#+end_src

** Hydra / TypeScript

Group TypeScript commands.

#+begin_src emacs-lisp

  (defhydra hydra-typescript (:color blue)
    "
    ^
    ^TypeScript^          ^Do^
    ^──────────^──────────^──^───────────
    _q_ quit             _b_ back
    ^^                   _e_ errors
    ^^                   _j_ jump
    ^^                   _r_ references
    ^^                   _R_ restart
    ^^                   ^^
    "
    ("q" nil)
    ("b" tide-jump-back)
    ("e" tide-project-errors)
    ("j" tide-jump-to-definition)
    ("r" tide-references)
    ("R" tide-restart-server))

#+end_src

** Hydra / Upload

Group upload commands.

#+begin_src emacs-lisp

  (pretty-hydra-define hydra-upload
    (:hint nil :color teal :quit-key "q" :title (with-faicon "cloud-upload" "Upload" 1 -0.05))
    ("Action"
     (("b" webpaste-paste-buffer "buffer")
      ("i" imgbb-upload "image")
      ("r" webpaste-paste-region "region"))))

#+end_src

** Hydra / Windows

Group window-related commands.

#+begin_src emacs-lisp

  (pretty-hydra-define hydra-windows
    (:hint nil :forein-keys warn :quit-key "q" :title (with-faicon "windows" "Windows" 1 -0.05))
    ("Window"
     (("b" balance-windows "balance")
      ("i" enlarge-window "heighten")
      ("j" shrink-window-horizontally "narrow")
      ("k" shrink-window "lower")
      ("u" winner-undo "undo")
      ("r" winner-redo "redo")
      ("l" enlarge-window-horizontally "widen")
      ("s" switch-window-then-swap-buffer "swap" :color teal))
     "Zoom"
     (("-" text-scale-decrease "out")
      ("+" text-scale-increase "in")
      ("=" (text-scale-increase 0) "reset"))))

#+end_src

* MODES
** Writer room mode

Distraction free writing mode

#+begin_src emacs-lisp
  ;; (use-package writeroom-mode)
#+end_src

* Yasnippet

#+begin_src emacs-lisp

  (use-package yasnippet
    :config
    ;; (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
    (yas-global-mode 1)   ;; enables yasnippet globally
    )

  ;; collection of common snippets
  (use-package yasnippet-snippets)

#+end_src

* PARENTHESIS

Check show paren mode [[stack-exchange:52209][fix]].

#+begin_src emacs-lisp

  (use-package faces
    :straight (:type built-in)
    :custom (show-paren-delay 0)
    :config
    (set-face-background 'show-paren-match "#161719")
    (set-face-bold 'show-paren-match t)
    (set-face-foreground 'show-paren-match "#ffffff"))

  ;; Turn on matching parenthesis highlighting
  ;; Commented as it doesn't work properly. A fix is required
  ;; (show-paren-mode 1)

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* DIRED
** Keybindings

| Key      | Command                   |
|----------+---------------------------|
| (        | dired-hide-details-mode   |
| I        | dired-maybe-insert-subdir |
| h        | dired-up-directory        |
| l        | dired-single-buffer       |
| M-DEL    | dired-prev-subdir         |
| H        | dired-hide-dotfiles-mode  |
| <tab>    | dired-subtree-toggle      |
| C-c C-n  | dired-narrow              |
| C-c C-f  | dired-narrow-fuzzy        |
           
#+begin_src emacs-lisp

  (my/leader-keys
    "d d" '(dired :which-key "Open dired")
    "d j" '(dired-jump :which-key "Dired jump to current")
    )

#+end_src

** Basic Config
To manage your files, =dired= is already a good file manager. To fine-tune its use, let's change some default values.

#+begin_src emacs-lisp

  (use-package dired
    :straight (:type built-in)
    :commands (dired dired-jump)
    :hook
    (dired-mode . dired-hide-details-mode)
    :bind (:map dired-mode-map
    ("C-c h" . hydra-dired/body)
    ("C-c o" . dired-open-file))
    :general
    (:states 'normal
       :keymaps 'dired-mode-map
       "l" 'dired-find-file
       "h" 'dired-up-directory)
    :delight "Dired"
    :config
    (setq delete-by-moving-to-trash t)
    ;; (dired-async-mode 1)
    :custom
    (dired-auto-revert-buffer t)
    (dired-dwim-target t)
    (dired-hide-details-hide-symlink-targets nil)
    (dired-omit-files "^\\.[^.].*")
    (dired-omit-verbose nil)
    (dired-listing-switches "-Alh1vD --group-directories-first")
    (dired-ls-F-marks-symlinks nil)
    (dired-recursive-copies 'always)
    )

  (pretty-hydra-define hydra-dired
    (:hint nil :color teal :quit-key "q" :title (with-fileicon "org" "Dired" 1 -0.05))
    ("Action"
     (("o" dired-omit-mode "toggle visibility of ommited files")
      ("c" dired-collapse-mode "toggle dired collapse")
      ("b" dired-ranger-bookmark "bookmark current dired buffer")
      ("v" dired-ranger-bookmark-visit "visit dired bookmark")
      ("c" dired-ranger-copy "copy like ranger")
      ("r" dired-ranger-copy-ring "view copy ring")
      ("m" dired-ranger-move "move like ranger")
      ("p" dired-ranger-paste "paste like ranger"))))

  ;; (add-hook 'dired-mode-hook
  ;;           (lambda ()
  ;;             (interactive)
  ;;             (dired-omit-mode 1)
  ;;             (dired-hide-details-mode 1)
  ;;             (hl-line-mode 1)))
#+end_src

** Dired Single
To avoid =dired= to keep buffers, I use [[https://github.com/crocket/dired-single][dired-single]].

#+begin_src emacs-lisp

  (use-package dired-single
    :after dired
    :bind (:map dired-mode-map
                ([remap dired-find-file] . dired-single-buffer)
                ([remap dired-up-directory] . dired-single-up-directory)
                ("M-DEL" . dired-prev-subdir)))

#+end_src

** Dired Open
By default, =dired= opens files in plain text. This behavior is sometimes
undesirable. Hopefully, [[https://github.com/Fuco1/dired-hacks/blob/master/dired-open.el][dired-open]] can be used to informs =dired= that certain
desired file extensions must be opened with external packages to GNU Emacs.

#+begin_src emacs-lisp

  (use-package dired-open
    :after (dired dired-jump)
    :custom (dired-open-extensions '(("mp4" . "mpv"))))

#+end_src

** Dired Icons
To know the type of file at a glance, [[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]] integrates icons
directly into =dired=.

#+begin_src emacs-lisp

  (use-package all-the-icons-dired
    :if (display-graphic-p)
    :hook (dired-mode . all-the-icons-dired-mode))

#+end_src

** Dired Hide Dotfiles
It is sometimes convenient to hide dotfiles. With [[https://github.com/mattiasb/dired-hide-dotfiles][dired-hide-dotfiles]] this
becomes possible.

#+begin_src emacs-lisp

  (use-package dired-hide-dotfiles
    ;; :hook (dired-mode . dired-hide-dotfiles-mode)
    :general
    (:states 'normal
       :keymaps 'dired-mode-map
       ")" 'dired-hide-dotfiles-mode))

#+end_src

** Dired Subtree
I like being able to =<TAB>= on a folder and see its contents, without me getting
into it. [[https://github.com/Fuco1/dired-hacks/blob/master/dired-subtree.el][dired-subtree]] allows this behavior.

#+begin_src emacs-lisp

  (use-package dired-subtree
    :after dired
    :bind (:map dired-mode-map
                ("<tab>" . dired-subtree-toggle)))

#+end_src

** Dired Narrow
Finally, to manage folders with a large number of files, it may be useful to filter with [[https://github.com/Fuco1/dired-hacks/blob/master/dired-narrow.el][dired-narrow]]

During the filtering process, several special functions are available. You can customize the binding by changing dired-narrow-map.

    dired-narrow-next-file (<down> or C-n) - move the point to the next file
    dired-narrow-previous-file (<up> or C-p) - move the point to the previous file
    dired-narrow-enter-directory (<right> or C-j) - descend into the directory under point and immediately go back to narrowing mode

#+begin_src emacs-lisp

  (use-package dired-narrow
    ;; :straight (:type built-in)
    :bind (("C-c C-n" . dired-narrow)
           ("C-c C-f" . dired-narrow-fuzzy)))

#+end_src

** Dired Rainbow

#+begin_src emacs-lisp

  ;; (use-package diredfl
  ;;   ;; :hook (dired-mode . diredfl-mode)
  ;;   :config
  ;;   (diredfl-global-mode))

  ;; (use-package dired-rainbow
  ;;   :config
  ;;   (progn
  ;;     (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
  ;;     (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
  ;;     (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
  ;;     (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
  ;;     (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
  ;;     (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
  ;;     (dired-rainbow-define media "#de751f" ("mp3" "mp4" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
  ;;     (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
  ;;     (dired-rainbow-define log "#c17d11" ("log"))
  ;;     (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
  ;;     (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
  ;;     (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
  ;;     (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
  ;;     (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
  ;;     (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
  ;;     (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
  ;;     (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
  ;;     (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
  ;;     (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
  ;;     (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*")
  ;;     )) 

#+end_src

** Dired Ranger

#+begin_src emacs-lisp

  (use-package dired-ranger
    :defer t)

#+end_src

** Dired Collapse

#+begin_src emacs-lisp

  (use-package dired-collapse
    :defer t)

#+end_src

* DASHBOARD
** Setup

#+begin_src emacs-lisp

  (use-package dashboard
    :init
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
    ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
    (setq dashboard-startup-banner "~/.emacs.d/emacs-dash.png")  ;; use custom image as banner
    (setq dashboard-center-content nil)

    :config
    (dashboard-setup-startup-hook)
  )

#+end_src

** Open dashboard in emacsclient instead of scratch

#+begin_src emacs-lisp

  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))

#+end_src

* SHELL
** Vterm

#+begin_src emacs-lisp
  ;; (condition-case nil
  ;; (add-to-list 'load-path "/home/lokesh/.emacs.d/straight/repos/emacs-libvterm")
  ;;   (require 'vterm)
  ;;  (error nil))

  (use-package vterm
    :straight nil
    :custom
    (vterm-shell "fish"))

  ;; (use-package vterm
  ;;   :after evil-collection
  ;;   :commands vterm
  ;;   :config
  ;;   (setq vterm-max-scrollback 10000)
  ;;   (advice-add 'evil-collection-vterm-insert :before #'vterm-reset-cursor-point))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-vterm"

#+end_src

* COMPLETION SYSTEM
** Vertico
#+begin_src emacs-lisp

    (use-package vertico
      :straight (:files (:defaults "extensions/*"))
      :init (vertico-mode)
      :bind (:map vertico-map
                    ("C-j" . vertico-next)
                    ("C-k" . vertico-previous)
                    ("DEL" . vertico-directory-delete-char)
                    ("M-DEL" . vertico-directory-delete-word)
                    ("C-<backspace>" . vertico-directory-up)
                    ("C-f" . vertico-quick-insert))
      :custom (vertico-cycle t)
      )

#+end_src

** Save History

Persist history over Emacs restarts. Vertico sorts by history position.

#+begin_src emacs-lisp

  (use-package savehist
    :init
    (savehist-mode))

#+end_src

** Orderless

#+begin_src emacs-lisp

  ;; Optionally use the `orderless' completion style. See
  ;; `+orderless-dispatch' in the Consult wiki for an advanced Orderless style
  ;; dispatcher. Additionally enable `partial-completion' for file path
  ;; expansion. `partial-completion' is important for wildcard support.
  ;; Multiple files can be opened at once with `find-file' if you enter a
  ;; wildcard. You may also give the `initials' completion style a try.
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch))
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

#+end_src

** Marginalia

#+begin_src emacs-lisp

  ;; Enable richer annotations using the Marginalia package
  (use-package marginalia
    :after vertico
    ;; Either bind `marginalia-cycle` globally or only in the minibuffer
    ;; :bind (("M-A" . marginalia-cycle)
    ;;        :map minibuffer-local-map
    ;;        ("M-A" . marginalia-cycle))

    ;; :custom
    ;; (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    ;; The :init configuration is always executed (Not lazy!)
    :init

    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))
    
  (use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup))

#+end_src

** Consult

Extra commands for vertico

| consult-line                 |                                                                                                       |
| consult-ripgrep              |                                                                                                       |
| consult-buffer               |                                                                                                       |
| consult-imenu                | search through headings                                                                               |
| consult-org-heading          | like consult-imenu but for org                                                                        |
| consult-mark                 | Show a list of previous mark locations                                                                |
| consult-outline              | Show a list of headings in the current file depending on type                                         |
| consult-minor-mode-menu      | Show a list of all minor modes, press i SPC to narrow to active modes                                 |
| consult-history              | History for current minibuffer, also works for terminal modes                                         |
| consult-file-externally      | Open a file in an external program                                                                    |
| consult-preview-mode         | Preview selections for various commands                                                               |
| consult-completion-in-region | Can be used with the completion-in-region-function variable to do in-buffer completions using Vertico |

#+begin_src emacs-lisp

  (use-package consult
    :demand t
    :bind (("C-s" . consult-line)
           :map minibuffer-local-map
           ("C-r" . consult-history))
    ;; :custom
    ;; (consult-project-root-function #'my/get-project-root)
    ;; (completion-in-region-function #'consult-completion-in-region)
    )

  (my/leader-keys
    "s"     '(:ignore t :which-key "search")
    "s s"   '(consult-line :which-key "search in current file")
    "s g"   '(consult-ripgrep :which-key "grep in current directory")
    ;; "s h"   '(consult-imenu :which-key "search headings in current file")
    "s h"   '(consult-outline :which-key "search headings in current file")
    "s o"   '(consult-org-heading :which-key "search org heading in current file")
    "s m"   '(consult-man :which-key "search man with regexp")
    )

#+end_src

** Embark

#+begin_src emacs-lisp

  (use-package embark
    :bind
    (("C-." . embark-act)
     ("C-;" . embark-dwim)
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
    ;; :map minibuffer-local-map
    ;; ("C-d" . embark-act))

    :init
    ;; Required as C-. is binded in evil
    (general-define-key
     :states '(normal visual)
     "C-." 'embark-act)

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)
    :config
    ;; Show Embark actions via which-key
    ;; (setq embark-action-indicator
    ;;       (lambda (map)
    ;;         (which-key--show-keymap "Embark" map nil nil 'no-paging)
    ;;         #'which-key--hide-popup-ignore-command)
    ;;       embark-become-indicator embark-action-indicator)

    ;; Hide the mode line of the Embark live/completions buffers
    ;; (add-to-list 'display-buffer-alist
    ;;              '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
    ;;                nil
    ;;                (window-parameters (mode-line-format . none))))
    )

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :after (embark consult)
    ;; :demand t ; only necessary if you have the hook below
    ;; ;; if you want to have consult previews as you move around an
    ;; ;; auto-updating embark collect buffer
    ;; :hook
    ;; (embark-collect-mode . consult-preview-at-point-mode)
    )
#+end_src

** Completions in Regions with Corfu

| Keybinding  | Command                  |
|-------------+--------------------------|
| RET         | corfu-insert             |
| TAB         | corfu-compete            |
| M-g         | corfu-show-location      |
| M-h         | corfu-show-documentation |

#+begin_src emacs-lisp

  (use-package corfu
    ;; :straight '(corfu :host github
    ;;                   :repo "minad/corfu")
    ;; Optional customizations
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    ;; (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-commit-predicate nil)   ;; Do not commit selected candidates on next input
    ;; (corfu-quit-at-boundary t)     ;; Automatically quit at word boundary
    ;; (corfu-quit-no-match t)        ;; Automatically quit if there is no match
    ;; (corfu-echo-documentation nil) ;; Do not show documentation in the echo area

    ;; Optionally use TAB for cycling, default is `corfu-complete'.
    :bind (:map corfu-map
                ("C-j" . corfu-next)
                ("C-k" . corfu-previous))

    ;; You may want to enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since dabbrev can be used globally (M-/).
    :init
    (corfu-global-mode))

  ;; Emacs tries to complete the word by searching all open buffers
  ;; Dabbrev is in-built into emacs. It works with Corfu
  (use-package dabbrev
    :straight (:type built-in)
    ;; Swap M-/ and C-M-/
    :bind (("M-/" . dabbrev-completion)
           ("C-M-/" . dabbrev-expand))
    :config 
    ;; make dabbrev case sensitive
    (setq dabbrev-case-fold-search nil))

  ;; A few more useful configurations...
  (use-package emacs
    :straight (:type built-in)
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))

#+end_src

** Switching Directories with consult-dir

Easy switching directories. Works great when combined with embark

#+begin_src emacs-lisp

  (use-package consult-dir
    :bind (("C-x C-d" . consult-dir)
           :map vertico-map
           ("C-x C-d" . consult-dir)
           ("C-x C-j" . consult-dir-jump-file))
    :custom
   (consult-dir-project-list-function nil)
   )

  ;; ;; Thanks Karthik!
  ;; (with-eval-after-load 'eshell-mode
  ;;   (defun eshell/z (&optional regexp)
  ;;     "Navigate to a previously visited directory in eshell."
  ;;     (let ((eshell-dirs (delete-dups (mapcar 'abbreviate-file-name
  ;;                                             (ring-elements eshell-last-dir-ring)))))
  ;;       (cond
  ;;        ((and (not regexp) (featurep 'consult-dir))
  ;;         (let* ((consult-dir--source-eshell `(:name "Eshell"
  ;;                                                    :narrow ?e
  ;;                                                    :category file
  ;;                                                    :face consult-file
  ;;                                                    :items ,eshell-dirs))
  ;;                (consult-dir-sources (cons consult-dir--source-eshell consult-dir-sources)))
  ;;           (eshell/cd (substring-no-properties (consult-dir--pick "Switch directory: ")))))
  ;;        (t (eshell/cd (if regexp (eshell-find-previous-directory regexp)
  ;;                        (completing-read "cd: " eshell-dirs))))))))

#+end_src

** Other Config

#+begin_src emacs-lisp

  ;; ;; A few more useful configurations...
  ;; (use-package emacs
  ;;   :init
  ;;   ;; Add prompt indicator to `completing-read-multiple'.
  ;;   ;; Alternatively try `consult-completing-read-multiple'.
  ;;   (defun crm-indicator (args)
  ;;     (cons (concat "[CRM] " (car args)) (cdr args)))
  ;;   (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;;   ;; Do not allow the cursor in the minibuffer prompt
  ;;   (setq minibuffer-prompt-properties
  ;;         '(read-only t cursor-intangible t face minibuffer-prompt))
  ;;   (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;;   ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;;   ;; Vertico commands are hidden in normal buffers.
  ;;   ;; (setq read-extended-command-predicate
  ;;   ;;       #'command-completion-default-include-p)

  ;;   ;; Enable recursive minibuffers
  ;;   (setq enable-recursive-minibuffers t)) 

#+end_src

* JUMPING

#+begin_src emacs-lisp

  (use-package avy
    :commands (avy-goto-char avy-goto-word-0 avy-goto-word-1 avy-goto-line)
    :init
    (general-define-key
     :states '(normal visual)
     "F" 'avy-goto-char-timer)
    )

  (use-package evil-snipe
    ;; :init
    ;; (general-define-key
    ;;  :states '(normal visual)
    ;;  "f" 'evil-snipe-f
    ;;  ;; "F" 'evil-snipe-F
    ;;  "t" 'evil-snipe-t
    ;;  "T" 'evil-snipe-T)
    :custom
    (evil-snipe-scope 'whole-visible)
    (evil-snipe-auto-scroll t)
    :config
    (evil-snipe-mode +1)
    (evil-snipe-override-mode 1)
    (push 'prodigy-mode evil-snipe-disabled-modes)
    )

  (use-package evil-easymotion
    :config
    (evilem-default-keybindings "H"))

  (my/leader-keys
    "j"   '(:ignore t :which-key "jump")
    "jj"  '(avy-goto-char :which-key "jump to char")
    ;; "jw"  '(avy-goto-word-0 :which-key "jump to word")
    "jL"  '(avy-goto-end-of-line :which-key "Avy goto line")
    "jw"  '(avy-goto-word-1 :which-key "jump to word starting with")
    "jl"  '(avy-goto-line :which-key "jump to line")
    "jm"  '(avy-move-line :which-key "Avy move line")
    "jM"  '(avy-move-region :which-key "Avy move region")
    "jc"  '(avy-copy-line :which-key "Avy copy line above")
    "jC"  '(avy-copy-region :which-key "Avy copy region above")
    "jk"  '(avy-kill-whole-line :which-key "Avy copy line as kill")
    "jK"  '(avy-kill-region :which-key "Avy kill region")
    "jp"  '(avy-kill-ring-save-region :which-key "Avy copy as kill")
    )

#+end_src

* PRODIGY

[[https://github.com/rejeep/prodigy.el][prodigy]]
[[https://gitlab.com/shackra/goimapnotify][goimapnotify]]

#+begin_src emacs-lisp

  (use-package prodigy
    :init
    (prodigy-define-tag
      :name 'email
      :ready-message "Checking Email using IMAP IDLE. Ctrl-C to shutdown.")
    (prodigy-define-tag
      :name 'desktop
      :ready-message "Desktop services. Ctrl-C to shutdown.")
    (prodigy-define-service
      :name "lokesh-gmail-imap"
      :command "goimapnotify"
      :args (list "-conf" (expand-file-name "goimapnotify/lokesh-gmail.json" (getenv "XDG_CONFIG_HOME")))
      :tags '(email)
      :kill-signal 'sigkill)
    (prodigy-define-service
      :name "lokesh-yahoo-imap"
      :command "goimapnotify"
      :args (list "-conf" (expand-file-name "goimapnotify/lokesh-yahoo.json" (getenv "XDG_CONFIG_HOME")))
      :tags '(email)
      :kill-signal 'sigkill)
    (prodigy-define-service
      :name "office-arc-imap"
      :command "goimapnotify"
      :args (list "-conf" (expand-file-name "goimapnotify/office-arc.json" (getenv "XDG_CONFIG_HOME")))
      :tags '(email)
      :kill-signal 'sigkill)
    (prodigy-define-service
      :name "random-wallpaper-every-10-min"
      :command "watch"
      :args (list "-n" "600" "feh --randomize --bg-fill ~/Pictures/Wallpapers/*")
      :tags '(desktop)
      :kill-signal 'sigkill))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "go-gitlab.com-shackra-goimapnotify"

#+end_src

* DEVELOPMENT
** Basic Config

Explore *tab-to-tab-stop* and *indent-relative*

*** Set tab width as 2

#+begin_src emacs-lisp

  (setq-default tab-width 2)
  (setq-default evil-shift-width tab-width)

#+end_src

*** Use spaces instead of tabs for indentation

#+begin_src emacs-lisp

  (setq-default indent-tabs-mode nil)

#+end_src

*** Use tab to work like in vim

#+begin_src emacs-lisp

  ;; (define-key evil-insert-state-map (kbd "TAB") 'tab-to-tab-stop)

#+end_src

*** Aggressive Indent

By default GNU Emacs auto-indents the code while typing with electric-indent-mode, but the indentation made is wrong when moving blocks, transposing lines and so on. The aggresive-indent package is an improved version of the previous mode, allowing a code to be always indented

#+begin_src emacs-lisp

  (use-package aggressive-indent
    :custom (aggressive-indent-comments-too t))

#+end_src

*** Highlight Indent Guides

With code nesting, it is important to always have a discrete visual on the indentation of our code. The highlight-indent-guides package allows you to see at a glance if an indentation is bad through block highlight.

#+begin_src emacs-lisp

  (use-package highlight-indent-guides
    :hook (prog-mode . highlight-indent-guides-mode)
    :custom (highlight-indent-guides-method 'character))

#+end_src

*** Folding

#+begin_src emacs-lisp

  (use-package vimish-fold
    :after evil)

  (use-package evil-vimish-fold
    :after vimish-fold
    :init
    (setq evil-vimish-fold-mode-lighter " ⮒")
    :config
    (general-define-key
     :states 'normal
     :mode evil-vimish-fold-mode
     "zF" 'vimish-fold-avy)
    :hook ((prog-mode conf-mode text-mode) . evil-vimish-fold-mode))

#+end_src

** Linter

To integrate syntax checking during development, [[https://www.flycheck.org/][Flycheck]] lints warnings and
errors directly within buffers. To use it, you need to install the [[https://github.com/flycheck/flycheck][flycheck]]
package on GNU Emacs and install the necessary linters for the programming
languages you use, via your system package manager.

*NOTE:* The GNU Emacs community has produced a number of [[https://github.com/flycheck/flycheck/blob/master/doc/community/extensions.rst][extensions to Flycheck]].

| C-c ! | flycheck commands |

#+begin_src emacs-lisp

  (use-package flycheck
    :delight
    :hook (lsp-mode . flycheck-mode)
    ;; :bind (:map flycheck-mode-map
    ;;             ("M-p" . flycheck-previous-error)
    ;;             ("M-n" . flycheck-next-error))
    :custom
    (flycheck-disable-checker 'typescript-tslint)
    (flycheck-enable-checker 'javascript-eslint)
    (flycheck-display-errors-delay .3)
    )

#+end_src

** Expand Region

If you expand too far, you can contract the region by pressing - (minus key),
or by prefixing the shortcut you defined with a negative argument: C-- C-=.

#+begin_src emacs-lisp

  (use-package expand-region
    :bind ("C-=" . er/expand-region))

#+end_src

** Language Server Protocol (LSP)
*** lsp-mode
Use Language server protocol.
[[https://github.com/emacs-lsp/lsp-mode/wiki][Wiki]], [[https://emacs-lsp.github.io/lsp-mode/][Documentation]]
[[https://emacs-lsp.github.io/lsp-mode/page/languages/][Language Documentation]]

#+begin_src emacs-lisp

  (use-package lsp-mode
    :hook ((latex-mode js2-mode) . lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-l")
    :config
    (lsp-enable-which-key-integration t)
    )

  (my/leader-keys
    "l"  '(:ignore t :which-key "lsp")
    ;; "ld" 'xref-find-definitions
    ;; "lr" 'xref-find-references
    "ln" 'lsp-ui-find-next-reference
    "lp" 'lsp-ui-find-prev-reference
    ;; "ls" 'counsel-imenu
    "le" 'lsp-ui-flycheck-list
    ;; "lS" 'lsp-ui-sideline-mode
    ;; "lX" 'lsp-execute-code-action
    )

#+end_src

Useful commands: flymake-show-diagnostics-buffer (show error messages on the fly)
*** lsp-ui

[[https://github.com/emacs-lsp/lsp-ui][Documentation]]

| Command                               | Description                                                        |
|---------------------------------------+--------------------------------------------------------------------|
| Sideline                              |                                                                    |
|---------------------------------------+--------------------------------------------------------------------|
| =lsp-ui-sideline-show-diagnostics=      | show =diagnostics messages= in sideline                              |
| =lsp-ui-sideline-show-hover=            | show =hover messages= in sideline                                    |
| =lsp-ui-sideline-show-code-actions=     | show =code actions= in sideline                                      |
| =lsp-ui-sideline-update-mode=           | When set to 'line' the information will be                         |
|                                       | updated when user changes current line otherwise                   |
|                                       | the information will be updated when user changes current point    |
| =lsp-ui-sideline-delay=                 | seconds to wait before showing sideline                            |
|---------------------------------------+--------------------------------------------------------------------|
| Peak                                  |                                                                    |
|---------------------------------------+--------------------------------------------------------------------|
| =lsp-ui-peek-enable=                    | enable =lsp-ui-peek=                                                |
| =lsp-ui-peek-show-directory=            | show the directory of files                                        |
|---------------------------------------+--------------------------------------------------------------------|
| Doc                                   |                                                                    |
|---------------------------------------+--------------------------------------------------------------------|
| =lsp-ui-doc-enable=                     | enable =lsp-ui-doc=                                                  |
| =lsp-ui-doc-position=                   | Where to display the doc                                           |
| =lsp-ui-doc-delay=                      | Number of seconds before showing the doc                           |
| =lsp-ui-doc-show-with-cursor=           | When non-nil, move the cursor over a symbol to show the doc        |
| =lsp-ui-doc-show-with-mouse=            | When non-nil, move the mouse pointer over a symbol to show the doc |
|---------------------------------------+--------------------------------------------------------------------|
| Imenu                                 |                                                                    |
|---------------------------------------+--------------------------------------------------------------------|
| =lsp-ui-imenu-window-width=             | set window width                                                   |
| =lsp-ui-imenu--custom-mode-line-format= | mode line format                                                   |
| =lsp-ui-imenu-auto-refresh=             | auto refresh when necessary                                        |
| =lsp-ui-imenu-refresh-delay=            | delay to refresh imenu                                             |

#+begin_src emacs-lisp

  (use-package lsp-ui
    ;; :after lsp
    ;; :hook (lsp-mode . lsp-ui-mode)
    ;; :custom
    ;; ;; (lsp-ui-sideline-enable t)
    ;; ;; (lsp-ui-sideline-show-hover nil)
    ;; (lsp-ui-doc-position 'bottom)
    :config
    (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
    (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
    ;; (lsp-ui-doc-show)
  )

#+end_src

*** lsp-treemacs

[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-errors-list= - Show a tree view for the diagnostic messages in the project
  - =lsp-treemacs-quick-fix= or press =x= when you are in Error List view - offer quickfixes for the error at point.
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-implementations= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-call-hierarchy=
  - Use =C-u M-x lsp-treemacs-call-hierarchy= to display outgoing call hierarchy.
- =lsp-treemacs-type-hierarchy=

  This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

  #+begin_src emacs-lisp

    (use-package lsp-treemacs
      :after (lsp treemacs)
      :config
      (lsp-treemacs-sync-mode 1))

  #+end_src

*** consult-lsp

- =consult-lsp-diagnostics=: Select diagnostics from current workspace. Pass prefix argument to search all workspaces
- =consult-lsp-symbols=: Select symbols from current workspace. Pass prefix argument to search all workspaces.
- =consult-lsp-file-symbols=: Interactively select a symbol from the current file, in a manner similar to consult-line. 

#+begin_src emacs-lisp

  (use-package consult-lsp
    ;; :commands (consult-lsp-diagnostics consult-lsp-symbols)
  )
  
  ;; Use the following line to replace xref-find-apropos in lsp-mode controlled buffers:
  ;; (define-key lsp-mode-map [remap xref-find-apropos] #'consult-lsp-symbols)

#+end_src

** Debugging with dap-mode
*** Configuration

[[https://emacs-lsp.github.io/dap-mode/][Dap-mode]] is an excellent package for bringing rich debugging capabilities to Emacs via the [[https://microsoft.github.io/debug-adapter-protocol/][Debug Adapter Protocol]].  
Check out the [[https://emacs-lsp.github.io/dap-mode/page/configuration/][configuration docs]] to learn how to configure the debugger for your language.

Dap ui -> sessions, locals, expressions, breakpoints

#+begin_src emacs-lisp

  (use-package dap-mode
    :after lsp-mode
    ;; Hide all dap-ui buffers
    :custom
    (lsp-enable-dap-auto-configure nil)

    :config
    (dap-ui-mode 1)       ;; show basic ui
    (dap-tooltip-mode 1)  ;; show tooltip

    ;; Setup debugging for node
    (require 'dap-node)
    (dap-node-setup)

    ;; Bind `C-c l d` to `dap-hydra` for easy access
    (general-define-key
     :keymaps 'lsp-mode-map
     :prefix lsp-keymap-prefix
     "d" '(dap-hydra t :wk "debugger"))
  )

#+end_src

*** Tips
**** Node-Typescript

Debug config location -> .vscode/launch.json

#+begin_src json

    {
      "name": "Launch Application",
      "type": "node",
      "request": "launch",
      "args": ["src/boot.ts"],
      "runtimeArgs": ["--nolazy", "-r", "ts-node/register"],
      "sourceMaps": true,
      "cwd": "${workspaceFolder}",
      "protocol": "inspector",
    },
    {
      "name": "Current TS File",
      "type": "node",
      "request": "launch",
      "args": ["${relativeFile}"],
      "runtimeArgs": ["--nolazy", "-r", "ts-node/register"],
      "sourceMaps": true,
      "cwd": "${workspaceFolder}",
      "console": "integratedTerminal",
      "protocol": "inspector",
    },
    {
      "name": "Current TS Tests File",
      "type": "node",
      "request": "launch",
      "program": "${workspaceRoot}/node_modules/.bin/jest",
      "args": ["-r", "ts-node/register", "${relativeFile}"],
      "cwd": "${workspaceFolder}",
      "protocol": "inspector"
    },
    {
        "name": "Attach: Nodemon",
        "type": "node",
        "request": "attach",
        "processId": "${command:PickProcess}",
        "restart": true,
        "protocol": "inspector"
    },

#+end_src

Nodemon config for attach request with ts-node

#+begin_src json

  "exec": "node --inspect -r ts-node/register src/boot.ts"
  
#+end_src

** Programming Languages and Tools
*** JavaScript
**** Js2 Mode
JavaScript is one of those languages that needs a bit of setup time to get some
stability with GNU Emacs. By default GNU Emacs uses =js-mode= as the major mode
for JavaScript buffers. However, I prefer to use [[https://github.com/mooz/js2-mode][js2-mode]] which is an enhanced
version of =js-mode=. This package offers a better syntax highlighting and
proposes many other features.

As LSP server I use [[https://github.com/typescript-language-server/typescript-language-server][typescript-language-server]] (=ts-ls=) which is the one
recommended by the LSP mode community. To use the LSP server, do not forget to
configure the LSP package and to install this LSP server through LSP mode or
with your system package manager

#+begin_src emacs-lisp

  (use-package js2-mode
    :mode "\\.js\\'"
    :hook ((js2-mode . js2-imenu-extras-mode)
           (js2-mode . lsp-deferred))
    :custom (js-indent-level 2)
    ;; :config (flycheck-add-mode 'javascript-eslint 'js2-mode)
  )

#+end_src

**** Prettier js
I like to use [[https://prettier.io/][prettier]] to get my TypeScript code clean. To use it, do not forget
to install it with your package manager.

#+begin_src emacs-lisp

  ;; (use-package prettier-js
  ;;   :delight
  ;;   :custom (prettier-js-args '("--print-width" "100"
  ;;                               "--single-quote" "true"
  ;;                               "--trailing-comma" "all")))

#+end_src

**** TypeScript

For my TypeScript adventures, the [[http://github.com/ananthakumaran/typescript.el][typescript-mode]] package and the
[[https://github.com/typescript-language-server/typescript-language-server][typescript-language-server]] (=ts-ls=) LSP server are more than enough. To use the
LSP server, do not forget to configure the LSP package and to install this LSP
server through LSP mode or with your system package manager if it is not already
done.

#+begin_src emacs-lisp

  (use-package typescript-mode
    :hook ((typescript-mode . lsp-deferred))
    :mode ("\\.\\(ts\\|tsx\\)\\'")
    :custom
    (lsp-clients-typescript-server-args '("--stdio" "--tsserver-log-file" "/dev/stderr"))
    (typescript-indent-level 2)
    :config
    (flycheck-add-mode 'javascript-eslint 'typescript-mode)
  )

#+end_src

*Important note!*  For =lsp-mode= to work with TypeScript (and JavaScript) you will need to install a language server on your machine.  If you have Node.js installed, the easiest way to do that is by running the following command:

#+begin_src shell :tangle no

  npm install -g typescript-language-server typescript

#+end_src

This will install the [[https://github.com/theia-ide/typescript-language-server][typescript-language-server]] and the TypeScript compiler package.

**** Angular
    
Installation from [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode docmentation]]
#+begin_src shell
  npm install -g @angular/language-service@next typescript  @angular/language-server
#+end_src

Fixes warning -> (Unknown notification: angular/projectLanguageService) from [[https://github.com/emacs-lsp/lsp-mode/wiki/Install-Angular-Language-server][lsp-mode]]

#+begin_src emacs-lisp
  (setq lsp-clients-angular-language-server-command
        '("node"
          "/home/lokesh/.nvm/versions/node/v14.16.0/lib/node_modules/@angular/language-server"
          "--ngProbeLocations"
          "/home/lokesh/.nvm/versions/node/v14.16.0/lib/node_modules"
          "--tsProbeLocations"
          "/home/lokesh/.nvm/versions/node/v14.16.0/lib/node_modules"
          "--stdio"))
#+end_src

*** Dockerfile

I often use Docker with Dockerfile. To support it with LSP and GNU Emacs, the
package dockerfile-mode with [[dockerfile-language-server-nodejs][dockerfile-language-server-nodejs]] (=dockerfile-ls=)
as LSP server is enough. To use it, do not forget to configure the LSP package
and to install this LSP server through LSP mode or with your system package
manager.

#+begin_src emacs-lisp

  (use-package dockerfile-mode :delight "δ" :mode "Dockerfile\\'")

#+end_src

*** JSON

JSON is probably the data format I use the most in the web. That's why its setup
below is a bit more advanced. As LSP server I prefer
[[https://emacs-lsp.github.io/lsp-mode/page/lsp-json/][vscode-json-languageserver]]. To use it, make sure you install it with your
package manager and to configure the LSP package.

#+begin_src emacs-lisp
  (use-package json-mode
    :delight "J"
    :mode "\\.json\\'"
    :hook (before-save . my/json-mode-before-save-hook)
    :preface
    (defun my/json-mode-before-save-hook ()
      (when (eq major-mode 'json-mode)
        (json-pretty-print-buffer)))

    (defun my/json-array-of-numbers-on-one-line (encode array)
      "Print the arrays of numbers in one line."
      (let* ((json-encoding-pretty-print
              (and json-encoding-pretty-print
                   (not (loop for x across array always (numberp x)))))
             (json-encoding-separator (if json-encoding-pretty-print "," ", ")))
        (funcall encode array)))
    :config (advice-add 'json-encode-array :around #'my/json-array-of-numbers-on-one-line))
#+end_src

*** Markdown

To edit my files in Markdown, I use [[https://github.com/jrblevin/markdown-mode][markdown-mode]] with [[https://emacs-lsp.github.io/lsp-mode/page/lsp-markdown/][unified-language-server]]
as LSP server. To use it, do not forget to configure the LSP package and to
install this LSP server with your system package manager. Added to that, to
convert Markdown files, you can also install [[https://github.com/jgm/pandoc][pandoc]] with your package manager
system.

#+begin_src emacs-lisp

  (use-package markdown-mode
    :delight "μ"
    ;; :ensure-system-package (pandoc . "yay -S pandoc")
    :mode ("\\.\\(md\\|markdown\\)\\'")
    :custom (markdown-command "/usr/bin/pandoc"))

#+end_src

Finally, it is always good to have a preview of the Markdown rendering. The
[[https://github.com/ancane/markdown-preview-mode][markdown-preview-mode]] package allows this.

#+begin_src emacs-lisp

  (use-package markdown-preview-mode
    :commands markdown-preview-mode
    :custom
    (markdown-preview-javascript
     (list (concat "https://github.com/highlightjs/highlight.js/"
                   "9.15.6/highlight.min.js")
           "<script>
              $(document).on('mdContentChange', function() {
                $('pre code').each(function(i, block)  {
                  hljs.highlightBlock(block);
                });
              });
            </script>"))
    (markdown-preview-stylesheets
     (list (concat "https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/"
                   "3.0.1/github-markdown.min.css")
           (concat "https://github.com/highlightjs/highlight.js/"
                   "9.15.6/styles/github.min.css")

           "<style>
              .markdown-body {
                box-sizing: border-box;
                min-width: 200px;
                max-width: 980px;
                margin: 0 auto;
                padding: 45px;
              }

              @media (max-width: 767px) { .markdown-body { padding: 15px; } }
            </style>")))

#+end_src

*** YAML

When I have to develop through YAML files, the [[https://github.com/yoshiki/yaml-mode][yaml-mode]] package with the
[[https://emacs-lsp.github.io/lsp-mode/page/lsp-yaml/][yaml-language-server]] LSP server meets my needs. To use it, do not forget to
configure the LSP package and to install this LSP server through LSP mode or
with your system package manager.

#+begin_src emacs-lisp
    
  (use-package yaml-mode
    :delight "ψ"
    :hook (yaml-mode . lsp-deferred)
    :mode ("\\.\\(yaml\\|yml\\)\\'"))
    
#+end_src

*** SQL

Install SQL language server using go and add the location($HOME/go/bin) to path
Alternatively SQL language server can also be installed using npm using =npm install i -g sql-language-server=

#+begin_src shell

  go install github.com/lighttiger2505/sqls@latest

#+end_src


For handling SQL files, the =sql-mode= built-in package of GNU Emacs with the [[https://emacs-lsp.github.io/lsp-mode/page/lsp-sqls/][sqls]]
LSP server does the job.

#+begin_src emacs-lisp

  (use-package sql-mode
    :straight (:type built-in)
    ;; :ensure-system-package (sqls . "yay -S sqls")
    :mode "\\.sql\\'")

#+end_src

Finally, I use [[https://github.com/alex-hhh/emacs-sql-indent][sql-indent]] to better manage the indentations of my SQL queries.

#+begin_src emacs-lisp

  (use-package sql-indent
    :delight sql-mode "Σ"
    :hook (sql-mode . sqlind-minor-mode))

#+end_src

*** Haskell

- [[github:ndmitchell/ghcid][ghcid (GHCi Auto-Reloader)]]
- [[github:ndmitchell/hlint][hlint (Smart Linter)]]
- [[github:chrisdone/hindent][hindent (Formatter)]]

#+begin_src emacs-lisp

  (use-package haskell-mode)

#+end_src

*** Emacs Lisp

#+begin_src emacs-lisp

  (add-hook 'emacs-lisp-mode-hook #'flycheck-mode)

  (my/leader-keys
    "e"   '(:ignore t :which-key "eval")
    "e b"   '(eval-buffer :which-key "Eval elisp in buffer")
    "e d"   '(eval-defun :which-key "Eval defun")
    "e e"   '(eval-expression :which-key "Eval elisp expression")
    "e l"   '(eval-last-sexp :which-key "Eval last sexression"))

  (my/leader-keys
    :keymaps '(visual)
    "e r" '(eval-region :which-key "eval region"))

#+end_src

*** Scheme

[[https://gitlab.com/emacs-geiser/geiser][Geiser]] is a scheme interaction mode with repl and minor modes

#+begin_src emacs-lisp

  ;; TODO: This causes issues for some reason.
  ;; :bind (:map geiser-mode-map
  ;;        ("TAB" . completion-at-point))

  (use-package geiser
    :config
    ;; (setq geiser-default-implementation 'gambit)
    ;; (setq geiser-active-implementations '(gambit guile))
    ;; (setq geiser-implementations-alist '(((regexp "\\.scm$") gambit)
    ;;                                      ((regexp "\\.sld") gambit)))
    ;; (setq geiser-repl-default-port 44555) ; For Gambit Scheme
    (setq geiser-default-implementation 'guile)
    (setq geiser-active-implementations '(guile))
    ;; (setq geiser-repl-default-port 44555) ; For Gambit Scheme
    (setq geiser-implementations-alist '(((regexp "\\.scm$") guile))))

  (use-package geiser-guile)

#+end_src

*** Bash

Being a UNIX user, I often do Bash. Since GNU Emacs already supports it, I only
use the [[https://emacs-lsp.github.io/lsp-mode/page/lsp-bash/][bash-language-server]] (=bash-ls=) as LSP server. To use it, do not forget
to configure the LSP package and to install this LSP server through LSP mode or
with your system package manager.

Finally, the following snippet ensures that execution right (with =chmod +x=) is
automatically granted to save a shell script file that begins with a =#!= shebang.

#+begin_src emacs-lisp
  (use-package sh-script
    :straight (:type built-in)
    ;; :hook (after-save . executable-make-buffer-file-executable-if-script-p)
  )
#+end_src

*** COMMENTED
**** C/C++

#+begin_src emacs-lisp

  ;; (use-package ccls
  ;;   :hook ((c-mode c++-mode objc-mode cuda-mode) .
  ;;          (lambda () (require 'ccls) (lsp))))

#+end_src

**** Meta Lisp

Here are packages that are useful across different Lisp and Scheme implementations:

#+begin_src emacs-lisp

  ;; (use-package lispy
  ;;   :hook ((emacs-lisp-mode . lispy-mode)
  ;;          (scheme-mode . lispy-mode)))

  ;; ;; (use-package evil-lispy
  ;; ;;   :hook ((lispy-mode . evil-lispy-mode)))

  ;; (use-package lispyville
  ;;   :hook ((lispy-mode . lispyville-mode))
  ;;   :config
  ;;   (lispyville-set-key-theme '(operators c-w additional
  ;;                               additional-movement slurp/barf-cp
  ;;                               prettify)))

#+end_src

**** HTML

#+begin_src emacs-lisp

  ;; (use-package web-mode
  ;;   :mode "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'"
  ;;   :config
  ;;   (setq-default web-mode-code-indent-offset 2)
  ;;   (setq-default web-mode-markup-indent-offset 2)
  ;;   (setq-default web-mode-attribute-indent-offset 2))

  ;; ;; 1. Start the server with `httpd-start'
  ;; ;; 2. Use `impatient-mode' on any buffer
  ;; (use-package impatient-mode)

  ;; (use-package skewer-mode)

#+end_src

**** Python

We use =lsp-mode= and =dap-mode= to provide a more complete development environment for Python in Emacs.  Check out [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pyls/][the =pyls= configuration]] in the =lsp-mode= documentation for more details.

Make sure you have the =pyls= language server installed before trying =lsp-mode=!

#+begin_src sh :tangle no

  # pip install --user "python-language-server[all]"

#+end_src

There are a number of other language servers for Python so if you find that =pyls= doesn't work for you, consult the =lsp-mode= [[https://emacs-lsp.github.io/lsp-mode/page/languages/][language configuration documentation]] to try the others!

#+begin_src emacs-lisp

  ;; (use-package python-mode
  ;;   :hook (python-mode . lsp-deferred)
  ;;   :custom
  ;;   ;; NOTE: Set these if Python 3 is called "python3" on your system!
  ;;   ;; (python-shell-interpreter "python3")
  ;;   ;; (dap-python-executable "python3")
  ;;   (dap-python-debugger 'debugpy)
  ;;   :config
  ;;   (require 'dap-python))


#+end_src

You can use the pyvenv package to use =virtualenv= environments in Emacs.  The =pyvenv-activate= command should configure Emacs to cause =lsp-mode= and =dap-mode= to use the virtual environment when they are loaded, just select the path to your virtual environment before loading your project.

#+begin_src emacs-lisp

  ;; (use-package pyvenv
  ;;   :after python-mode
  ;;   :config
  ;;   (pyvenv-mode 1))

#+end_src

**** Python 1

Python with GNU Emacs is one of the best supported languages. By using
=python-mode= and [[https://github.com/microsoft/pyright][pyright]] as LSP server, it's fun to develop in Python. With
=python-mode= I like to add some bindings to speed up the code code navigation in
Python. Besides that, I use [[https://github.com/myint/autoflake][autoflake]] to remove unused imports and variables.

#+begin_src emacs-lisp

  ;; (use-package python
  ;;   :straight flycheck
  ;;   :delight "π"
  ;;   :preface
  ;;   (defun python-remove-unused-imports()
  ;;     "Remove unused imports and unused variables with autoflake."
  ;;     (interactive)
  ;;     (if (executable-find "autoflake")
  ;;         (progn
  ;;           (shell-command (format "autoflake --remove-all-unused-imports -i %s"
  ;;                                  (shell-quote-argument (buffer-file-name))))
  ;;           (revert-buffer t t t))
  ;;       (warn "[✗] python-mode: Cannot find autoflake executable.")))
  ;;   :bind (:map python-mode-map
  ;;               ("M-[" . python-nav-backward-block)
  ;;               ("M-]" . python-nav-forward-block)
  ;;               ("M-|" . python-remove-unused-imports))
  ;;   :custom
  ;;   (flycheck-pylintrc "~/.pylintrc")
  ;;   (flycheck-python-pylint-executable "/usr/bin/pylint"))

#+end_src

I have tried several LSP servers. I have experienced that =mspyls= is faster than
=pylsp=, but =mspyls= has a memory leakage and became depreciated in favor of
=pyright=. To configure pyright with GNU Emacs, the [[https://github.com/emacs-lsp/lsp-pyright][lsp-pyright]] package is
enough.

#+begin_src emacs-lisp

  ;; (use-package lsp-pyright
  ;;   :if (executable-find "pyright")
  ;;   ;; To properly load `lsp-pyrigt', the `require' instruction is important.
  ;;   :hook (python-mode . (lambda ()
  ;;                          (require 'lsp-pyright)
  ;;                          (lsp-deferred)))
  ;;   :custom
  ;;   (lsp-pyright-python-executable-cmd "python3")
  ;;   (lsp-pyright-venv-path "~/.cache/pypoetry/virtualenvs/"))

#+end_src

To make sure my Python code is well formatted, I use [[https://github.com/psf/black][black]]. Feel free to install
it in your virtual environment or directly on your system.

#+begin_src emacs-lisp

  ;; (use-package blacken
  ;;   :delight
  ;;   :hook (python-mode . blacken-mode)
  ;;   :custom (blacken-line-length 79))

#+end_src

To sort my Python imports, [[https://github.com/paetzke/py-isort.el][py-isort]] does a good job. Also, do not forget to
install in your virtual environment or directly on your system.

#+begin_src emacs-lisp

  ;; (use-package py-isort
  ;;   :hook ((before-save . py-isort-before-save)
  ;;          (python-mode . pyvenv-mode)))

#+end_src

I use a single virtual environment for all my Python projects. The combination
of [[https://docs.python.org/3/library/venv.html][venv]] with [[https://github.com/jorgenschaefer/pyvenv][pyvenv]] does the job well. When I encounter a Python buffer, my
virtual environment activates and stays activated even after I finish working in
Python. A better behavior would be to define a function through a
=kill-buffer-hook= that would call the =pyvenv-deactivate= command when all Python
buffers are closed.

#+begin_src emacs-lisp

  ;; (use-package pyvenv
  ;;   :after python
  ;;   :custom
  ;;   (pyvenv-default-virtual-env-name (expand-file-name (format "%s/myenv/" xdg-data)))
  ;;   (pyvenv-workon (expand-file-name (format "%s/myenv/" xdg-data)))
  ;;   :config (pyvenv-tracking-mode))

#+end_src

Finally, to better manage the different versions of Python through projects, I
use [[https://github.com/pyenv/pyenv][pyenv]] through [[https://github.com/pythonic-emacs/pyenv-mode][pyenv-mode]]-mode. To use it, make sure you have =pyenv= installed
on your system.

#+begin_src emacs-lisp

  ;; (use-package pyenv-mode
  ;;   :hook ((python-mode . pyenv-mode)
  ;;          (projectile-switch-project . projectile-pyenv-mode-set))
  ;;   :custom (pyenv-mode-set "3.8.5")
  ;;   :preface
  ;;   (defun projectile-pyenv-mode-set ()
  ;;     "Set pyenv version matching project name."
  ;;     (let ((project (projectile-project-name)))
  ;;       (if (member project (pyenv-mode-versions))
  ;;           (pyenv-mode-set project)
  ;;         (pyenv-mode-unset)))))

#+end_src

**** LaTeX

Being a lover of beautiful writing, it is important for me to have a stable
LaTeX environment. To have access to this stability, I use the =tex-mode= built-in
package and [[https://github.com/latex-lsp/texlab][texlab]] as LSP server. To use it, make sure you install it with your
package manager and to configure the LSP package.

With =tex-mode= we need to ensure to install AUCTeX, which is a built-in package
for writing and formatting TeX files in GNU Emacs. With =AUCTeX you can for
example use the =TeX-command-master= (=C-c C-c=) command to compile your TeX files
and the =LaTeX-environment= (=C-c C-e=) command to insert a LaTeX environment.

#+begin_src emacs-lisp

  ;; (use-package tex
  ;;   :straight auctex
  ;;   :preface
  ;;   (defun my/switch-to-help-window (&optional ARG REPARSE)
  ;;     "Switches to the *TeX Help* buffer after compilation."
  ;;     (other-window 1))
  ;;   :hook (LaTeX-mode . reftex-mode)
  ;;   :bind (:map TeX-mode-map
  ;;               ("C-c C-o" . TeX-recenter-output-buffer)
  ;;               ("C-c C-l" . TeX-next-error)
  ;;               ("M-[" . outline-previous-heading)
  ;;               ("M-]" . outline-next-heading))
  ;;   :custom
  ;;   (TeX-auto-save t)
  ;;   (TeX-byte-compile t)
  ;;   (TeX-clean-confirm nil)
  ;;   (TeX-master 'dwim)
  ;;   (TeX-parse-self t)
  ;;   (TeX-PDF-mode t)
  ;;   (TeX-source-correlate-mode t)
  ;;   (TeX-view-program-selection '((output-pdf "PDF Tools")))
  ;;   :config
  ;;   (advice-add 'TeX-next-error :after #'my/switch-to-help-window)
  ;;   (advice-add 'TeX-recenter-output-buffer :after #'my/switch-to-help-window)
  ;;   ;; the ":hook" doesn't work for this one... don't ask me why.
  ;;   (add-hook 'TeX-after-compilation-finished-functions 'TeX-revert-document-buffer))

#+end_src

Also, I like to use a TeX engine that can handle Unicode and use the font of my
choice.

#+begin_src emacs-lisp

  ;; (setq-default TeX-engine 'xetex)

#+end_src

By default, LSP mode uses =lsp-tex= as the LSP client for LaTeX. However, I prefer
to use [[https://github.com/ROCKTAKEY/lsp-latex][lsp-latex]] which fully supports =texlab=
(cf. https://github.com/ROCKTAKEY/lsp-latex/issues/26)

#+begin_src emacs-lisp

  (use-package lsp-latex
    :if (executable-find "texlab")
    ;; To properly load `lsp-latex', the `require' instruction is important.
    :hook (LaTeX-mode . (lambda ()
                          (require 'lsp-latex)
                          (lsp-deferred)))
    :custom (lsp-latex-build-on-save t))

#+end_src

To easier deal with =\label=, =\ref=, and =\cite= commands in LaTeX, I use the =reftex=
built-in package.

#+begin_src emacs-lisp

  ;; (use-package reftex
  ;;   :straight (:type built-in)
  ;;   :custom
  ;;   (reftex-save-parse-info t)
  ;;   (reftex-use-multiple-selection-buffers t))

#+end_src

Finally, it is often useful to put our hands in a bibliography in LaTeX. The built-in
package =bibtex= improves the visual and provides several commands.

#+begin_src emacs-lisp

  ;; (use-package bibtex
  ;;   :straight (:type built-in)
  ;;   :preface
  ;;   (defun my/bibtex-fill-column ()
  ;;     "Ensure that each entry does not exceed 120 characters."
  ;;     (setq fill-column 120))
  ;;   :hook ((bibtex-mode . lsp-deferred)
  ;;          (bibtex-mode . my/bibtex-fill-column)))

#+end_src

**** Go

#+begin_src emacs-lisp

  ;; (use-package go-mode
  ;;   :hook (go-mode . lsp-deferred))

#+end_src

**** Rust

#+begin_src emacs-lisp

  ;; (use-package rust-mode
  ;;   :mode "\\.rs\\'"
  ;;   :init (setq rust-format-on-save t))

  ;; (use-package cargo
  ;;   :straight t
  ;;   :defer t)

#+end_src

**** CSV

For my viewing pleasure, =csv-mode= provides a color syntax when editing CSV
files.

#+begin_src emacs-lisp
  ;; (use-package csv-mode :mode ("\\.\\(csv\\|tsv\\)\\'"))
#+end_src

**** EPUB

Sometimes I have to read digital books in EPUB format. The [[https://github.com/wasamasa/nov.el][nov]] package allows to
open this kind of file.

#+begin_src emacs-lisp
  ;; (use-package nov
  ;;   :mode ("\\.epub\\'" . nov-mode)
  ;;   :custom (nov-text-width 75))
#+end_src

**** Gnuplot

Whether professionally or personally, it is often necessary to visualize your
data in a quality graph. [[http://www.gnuplot.info/][Gnuplot]] is the perfect tool for this and the[[https://github.com/emacsorphanage/gnuplot][ gnuplot]]
package allows to support this tool with GNU Emacs. To use gnuplot, do not
forget to install it with your system package manager.

#+begin_src emacs-lisp
  ;; (use-package gnuplot
  ;;   :mode "\\.\\(gp\\|gpi\\|plt\\)'"
  ;;   :bind (:map gnuplot-mode-map
  ;;               ("C-c C-c".  gnuplot-send-buffer-to-gnuplot)))
#+end_src

**** Lua

I rarely program in Lua, but when I do, [[https://github.com/immerrr/lua-mode][lua-mode]] with [[https://emacs-lsp.github.io/lsp-mode/page/lsp-lua-language-server/][lua-language-server]] as LSP
server satisfies me amply. To use it, do not forget to configure the LSP package
and to install this LSP server through LSP mode or with your system package
manager.

#+begin_src emacs-lisp
  ;; (use-package lua-mode :delight "Λ" :mode "\\.lua\\'")
#+end_src

**** XML

To manage XML related files the =nxml-mode= package built into GNU Emacs and the
[[https://emacs-lsp.github.io/lsp-mode/page/lsp-xml/][LemMinX]] (=xmlls=) LSP server does the job. To use it, do not forget to configure
the LSP package and to install this LSP server through LSP mode or with your
system package manager.

#+begin_src emacs-lisp
  ;; (use-package nxml-mode
  ;;   :straight (:type built-in)
  ;;   :hook (nxml-mode . lsp-deferred)
  ;;   :mode ("\\.\\(xml\\|xsd\\|wsdl\\)\\'"))
#+end_src

** Emmet
Great for producing HTML and CSS selectors. [[https://github.com/smihica/emmet-mode][Documentation]]
Key bindings
| C-j       | emmet-expand           | expand the tag                 |
| C-M-left  | emmet-next-edit-point  | goto emmet next edit point     |
| C-M-right | emmet-prev-edit-point  | goto emmet previous edit point |
| C-c C-c w | emmet-wrap-with-markup |                                |

#+begin_src emacs-lisp

  (use-package emmet-mode)

#+end_src

** TREEMACS

File tree viewer.
[[https://github.com/Alexander-Miller/treemacs][Documentation]]
[[https://github.com/emacs-lsp/lsp-treemacs][lsp-integration]]

#+begin_src emacs-lisp

  (use-package treemacs)

  (with-eval-after-load 'treemacs
    (treemacs-resize-icons 20))

  ;; Add :after if needed
  (use-package treemacs-evil)

  ;; show hidden files
  ;; (setq-default neo-show-hidden-files t)

  (my/leader-keys 
    "d"    '(:ignore t :which-key "directory viewer")
    "d t"  '(treemacs-display-current-project-exclusively :which-key "treemacs")
    )

#+end_src

** MAGIT
*** Key Bindings
| C-x g | magit-status         |
| l r   | magit-reflog-current |
|       | magit-file-untrack   |

#+begin_src emacs-lisp
  (use-package magit)
  (my/leader-keys
    "g"      '(:ignore t :which-key "git")
    "g s"    '(magit-status :which-key "git status")
    "g l"    '(magit-log :which-key "git log")
    "g b"    '(magit-blame :which-key "git blame")
    )
#+end_src

*** Custom commands to use magit on dotfiles

Run *my/magit-status-bare* to use magit on dotfiles. To revert magit in order to use it for other repos run *my/magit-status*.

#+begin_src emacs-lisp
  (setq bare-git-dir (concat "--git-dir=" (expand-file-name "~/.cfg")))
  (setq bare-work-tree (concat "--work-tree=" (expand-file-name "~")))

  ;; use magit on git bare repos like dotfiles repos
  (defun my/magit-status-bare ()
    "set --git-dir and --work-tree in `magit-git-global-arguments' to `bare-git-dir' and `bare-work-tree' and calls `magit-status'"
    (interactive)
    (require 'magit-git)
    (add-to-list 'magit-git-global-arguments bare-git-dir)
    (add-to-list 'magit-git-global-arguments bare-work-tree)
    (call-interactively 'magit-status))

  ;; if you use `my/magit-status-bare' you cant use `magit-status' on other other repos 
  ;; you have to unset `--git-dir' and `--work-tree' use `my/magit-status' insted it unsets 
  ;; those before calling `magit-status'
  (defun my/magit-status ()
    "sets the default value in `magit-git-global-arguments' and calls `magit-status'"
    (interactive)
    (require 'magit-git)
    (setq-default magit-git-global-arguments (eval (car (get 'magit-git-global-arguments 'standard-value)))))
#+end_src

** PERSPECTIVE

Similar to workspaces. Each perspective has its own buffer list and
window layout.

#+begin_src emacs-lisp
  ;; (use-package perspective
  ;;   :bind
  ;;   ("C-x C-b" . persp-list-buffers)   ; or use a nicer switcher, see below
  ;;   :config
  ;;   (persp-mode))
#+end_src

** API Management
*** Restclient

#+begin_src emacs-lisp

  ;; (use-package restclient
  ;;   :defer t
  ;;   :mode (("\\.http\\'" . restclient-mode))
  ;;   :bind (:map restclient-mode-map
  ;;               ("C-c C-f" . json-mode-beautify)))

#+end_src

*** Verb

#+begin_src emacs-lisp

  (use-package verb
    :custom
    (verb-trim-body-end "[ \t\n\r]+")
  )
  
  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "C-c C-r") verb-command-map))

#+end_src

* ORG MODE
** Tips

*Pomodoro*: org-timer-* -> =C-c C-x=
(setq org-clock-sound "~/Downloads/ding.wav")

For entities compeletion: =\<M-tab>=
| =org-entities-help=          |           |
| =org-toggle-pretty-entities= | =C-c C-x \= |

| =org-toggle-inline-image= | =C-c C-x C-v= |
#+caption: caption for the figure
#+name: emacs logo
[[./emacs-dash.png]]

Emphasis: *bold* /italic/ _underlined_ =verbatim= ~code~ +strike-through+

| Commands                | binding                            |
|-------------------------+------------------------------------|
| =org-store-link=          |                                    |
| =org-insert-link=         | C-c C-l                            |
| =org-toggle-link-dislpay= |                                    |
| =org-todo=                | C-c C-t                            |
| =org-priority=            | C-c ,                              |
| =org-footnote-action=     | C-c C-x f                          |
|-------------------------+------------------------------------|
| =C-c C-n=                 | next visible heading               |
| =C-c C-p=                 | prev visible heading               |
| =C-c C-f=                 | next heading same level            |
| =C-c C-b=                 | prev heading same level            |
| =C-c C-u=                 | backward to higher heading         |
|-------------------------+------------------------------------|
| =C-c C-w=                 | refile region                      |
| =C-c ^=                   | sort same level entries            |
| =C-c *=                   | turn a normal line into a headline |
|-------------------------+------------------------------------|
| =C-x n s=                 | narrow buffer to current subtree   |
| =C-x n b=                 | narrow buffer to current block     |
| =C-x n w=                 | widen buffer to remove narrowing   |
|-------------------------+------------------------------------|
| C-<RET>                 | insert new heading                 |
| C-S-<RET>               | inert new todo heading             |
|-------------------------+------------------------------------|
| M-<LEFT>                | promote heading                    |
| M-<RIGHT>               | demote heading                     |
| M-S-<LEFT>              | promote subtree                    |
| M-S-<RIGHT>             | demote subtree                     |
| M-<UP>                  | move subtree up                    |
| M-<DOWN>                | move subtree down                  |

| Keybinding           | Command                  | Description                  |
|----------------------+--------------------------+------------------------------|
| M-<up>               | Move the title up        |                              |
| M-<down>             |                          |                              |
| M-<left>             | Increase heading         |                              |
| M-<rignt>            | Decrease heading         |                              |
| C-c C-o              | =org-open-at-point=        |                              |
| C-c C-j              | =org-goto=                 |                              |
| C-c C-t              | =org-todo=                 |                              |
| Shift-<left>,<right> | =org-todo=                 |                              |
| C-c C-l              | =org-insert-link=          |                              |
| C-c '                | =org-edit-special=         | edit block in another buffer |
| M-<enter>            |                          |                              |
|----------------------+--------------------------+------------------------------|
| C-c C-s              | =org-schedule=             |                              |
| C-c C-d              | =org-deadline=             |                              |
| C-c C-x e            | =org-set-effort=           |                              |
| C-c C-x p            | =org-set-property=         |                              |
|----------------------+--------------------------+------------------------------|
| C-c C-x C-i          | =org-clock-in=             |                              |
| C-c C-x C-o          | =org-clock-out=            |                              |
| C-c C-x C-j          | =org-clock-jump=           |                              |
|                      | =org-clock-report=         |                              |
|----------------------+--------------------------+------------------------------|
| C-c M-:              | =repeat-complex-command=   |                              |
| C-c *                | =org-ctrl-c-star=          |                              |
| C-c -                | =org-ctrl-c-minus=         |                              |
|                      | =counsel-org-goto=         |                              |
|                      | =org-export-dispatch=      |                              |
|                      | =org-footnote-new=         |                              |
|                      | =org-toggle-heading=       |                              |
|                      | =org-toggle-item=          |                              |
|                      | =org-toggle-checkbox=      |                              |
|                      | =org-babel-tangle=         |                              |
|                      | =org-toggle-inline-images= |                              |
|                      | =org-todo-list=            |                              |
# | C-c ESC ESC          | repeat-complex-command |

=M-<Enter>= -> Continue adding tags in add tag minibuffer

** Basic

#+begin_src emacs-lisp

  (use-package org
    ;; :straight org-contrib
    :config
    (setq org-modules '(
                        org-crypt
                        org-agenda
                        org-habit
                        ;; org-bookmark
                        ;; org-eshell
                        ;; org-irc
                        ))

    (add-hook 'org-mode-hook 'org-indent-mode)
    (setq org-directory "~/Org/")
    (setq org-ellipsis " ▾"
          org-hide-emphasis-markers t     ;; hide rich text markers      
          org-hide-block-startup nil
          ;; org-hide-block-startup nil
          org-startup-folded t
          org-cycle-separator-lines 2
          org-capture-bookmark nil

          org-startup-indented t

          ;; Org Source indentation
          org-src-fontify-natively t       
          org-src-tab-acts-natively nil     ;; setting it to t cause error in yasnippet expansion
          ;; org-edit-src-content-indentation 2
          ;; org-src-preserve-indentation nil
          ;; org-fontify-quote-and-verse-blocks t
          org-confirm-babel-evaluate nil
          )
  )    

    (my/leader-keys 
      "m"      '(:ignore t :which-key "Mode Specific Bindings")
      "m t"      '(org-toggle-link-display :which-key "Toggle the display of link")
      )
#+end_src

** Auto tangle configuration files

This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  (defun efs/org-babel-tangle-config()
    ;; (when (string-equal (file-name-directory (buffer-file-name))
    ;;                     (expand-file-name user-emacs-directory))
    (when (string-equal (buffer-file-name)
                        (expand-file-name "config.org" user-emacs-directory))
      ;; Dynamic scoping
      (let ((org-confirm-babel-evalute nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src

** Executing Source Blocks

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

  (org-babel-do-load-languages
    'org-babel-load-languages
        '((C          . t)
          (python     . t)
          (emacs-lisp . t)
          (shell      . t)
          (latex      . t)
          (js         . t)
          (octave     . t)
          (sql        . t)))

  ;; (with-eval-after-load 'org
  ;;   (org-babel-do-load-languages
  ;;       'org-babel-load-languages
  ;;       '((emacs-lisp . t)
  ;;       (python . t)))

  ;;   (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

** Priorities

Allow priorities from A to E.

#+begin_src emacs-lisp

  (setq org-highest-priority ?A
        org-default-priority ?C
        org-lowest-priority ?E)

#+end_src

** Todo

| =!=   | record timestamp                                 |
| =@=   | record a note                                    |
| =x/y= | do x while entering state, y while exiting state |

#+begin_src emacs-lisp
          
  (setq org-todo-keywords 
        '(
          (sequence "TODO(t@/!)" "ACTIVE(a!)" "BACKLOG(b!)" "HOLD(h@/!)" "|" "DONE(D!)")
          (sequence "WAITING(w@/!)" "DELEGATED(d@/!)" "|" "ASSIGNED(A@/!)" "CANCELLED(C@/!)")
          (sequence "CONSUME(c!)" "CONSUMING(k!)" "SHARE(s@/!)" "|" "IGNORED(I@/!)" "REFERENCE(R!)" "SHARED(S!)")
          (sequence "VISIT(v!)" "|" "VISITED(V!)")  ;; physically
          (sequence "|" "NOTE(N)" "BOOKMARK(B)")  ;; static todo keywords
          ))
          
#+end_src

** Agenda
     
#+begin_src emacs-lisp
          
  (setq org-agenda-files '(
                           "~/Org/Agenda.org"
                           "~/Org/Tasks.org"
                           "~/Org/Journal.org"
                           "~/Org/Birthdays.org"
                           "~/Org/Habits.org"
                           "~/Org/References.org"
                           "~/Org/Work.org"
                           ))
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  (setq org-log-reschedule 'note)
  (setq org-log-redeadline 'note)
  ;; (setq org-log-clock-out 'note)
  ;; (setq org-log-refile 'note)
  ;; (setq org-log-note-clock-out t)
  ;; (setq org-trest-insert-todo-heading-as-state-change t) ;; log inserting a heading

#+end_src

** Agenda Custom 
#+begin_src emacs-lisp
  ;; Configure custom agenda views
  (setq org-agenda-custom-commands
        '(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)))
            (todo "TODO"
                  ((org-agenda-overriding-header "Tasks")))
            (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

          ("T" "Tasks" tags "-STYLE=\"habit\"")
          ;; ("t" "Tasks" tags "+TODO={.*}&-STYLE=\"habit\"")

          ("h" "Habits" tags "+STYLE=\"habit\"")

          ("b" "Backlogs"
           ((todo "BACKLOG"
                  ((org-agenda-overriding-header "Backlog Tasks")))))

          ("R" "References to visit/consume" tags-todo "+CONSUME")

          ;; Low-effort next actions
          ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
           ((org-agenda-overriding-header "Low Effort Tasks")
            (org-agenda-max-todos 20)
            (org-agenda-files org-agenda-files)))

          ("w" "Office Status"
           ((tags "+@work+TODO=\"TODO\""
                  ((org-agenda-overriding-header "TODO")
                   (org-agenda-files org-agenda-files)))
            (tags "+@work+TODO=\"ACTIVE\""
                  ((org-agenda-overriding-header "Active Projects")
                   (org-agenda-files org-agenda-files)))
            (tags "+@work+TODO=\"BACKLOG\""
                  ((org-agenda-overriding-header "Todo when I am free")
                   (org-agenda-files org-agenda-files)))
            (tags "+@work+TODO=\"WAITING\""
                  ((org-agenda-overriding-header "Waiting")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (tags "+@work+TODO=\"DELEGATED\""
                  ((org-agenda-overriding-header "Delegated to some one else")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (tags "+@work+TODO=\"ASSIGNED\""
                  ((org-agenda-overriding-header "Assigned")
                   (org-agenda-files org-agenda-files)))
            (tags "+@work+TODO=\"COMPLETED\+TODO=\"DONE\""
                  ((org-agenda-overriding-header "Completed Projects")
                   (org-agenda-files org-agenda-files)))
            (tags "+@work+TODO=\"CANCELED\""
                  ((org-agenda-overriding-header "Cancelled Projects")
                   (org-agenda-files org-agenda-files)))))))
#+end_src

** Habit

# org-habit-toggle-habits
# org-habit-toggle-display-in-agenda

# org-habit-show-habits-only-for-today
# org-habit-show-all-today
# org-habit-show-habits
This is particularly useful if you use the org-habits module and you are late to file the completion of a habit. If you complete the habit with org-todo it will be completed for the current day, and scheduled to repeat at the next repeat interval based on the current date. If you use org-todo-at-date and set the appropriate date, the task will be scheduled to repeat as though the task had been completed on the specified date.
#+begin_src emacs-lisp
  ;; (require 'org-habit)
  ;; (add-to-list 'org-modules 'org-habit)
  ;; (setq org-habit-graph-column 60)
  (defun org-todo-at-date (date)
    (interactive (list (org-time-string-to-time (org-read-date))))
    (cl-flet ((org-current-effective-time (&rest r) date)
              (org-today (&rest r) (time-to-days date)))
      (org-todo)))
#+end_src

** Tag
#+begin_src emacs-lisp
  (setq org-tag-alist
        '((:startgroup)
          ;; Enter mutually exclusive groups here
          (:endgroup)
          (:startgrouptag)
          ("@work" . ?W)
          (:grouptags)
          ("new-gen" . ?N)
          ("idm" . ?I)
          ("appplication" . ?A)
          ("equipment" . ?E)
          (:endgrouptag)
          ("org-config" . ?o)
          ("agenda" . ?a)
          ("planning" . ?p)
          ("note" . ?n)
          ("idea" . ?i)))
#+end_src

** Capture Templates

+-------------+-------------------------------------------------------------------+
| Prefix -> % |                                                                   |
|-------------+-------------------------------------------------------------------|
| ?           | cursor position                                                   |
| U           | org capture source file link                                      |
| c           | clipboard                                                         |
| I           | hours (12 hr format)                                              |
| M           | minutes                                                           |
| p           | AM or PM                                                          |
| a           | source link                                                       |
| ^G          | prompt for tags                                                   |
| ^t          | pick date from calendar                                           |
|-------------+-------------------------------------------------------------------|
| %T          | Time stamp as above, with date and time.                          |
| %u, %U      | Like the above, but inactive time stamps.                         |
| %i          | Initial content, copied from the active region.  If               |
|             | there is text before %i on the same line, such as                 |
|             | indentation, and %i is not inside a %(sexp), that prefix          |
|             | will be added before every line in the inserted text.             |
| %a          | Annotation, normally the link created with org-store-link.        |
| %A          | Like %a, but prompt for the description part.                     |
| %l          | Like %a, but only insert the literal link.                        |
| %c          | Current kill ring head.                                           |
| %x          | Content of the X clipboard.                                       |
| %k          | Title of currently clocked task.                                  |
| %K          | Link to currently clocked task.                                   |
| %n          | User name (taken from the variable user-full-name).               |
| %f          | File visited by current buffer when org-capture was called.       |
| %F          | Full path of the file or directory visited by current buffer.     |
| %:keyword   | Specific information for certain link types, see below.           |
| %^g         | Prompt for tags, with completion on tags in target file.          |
| %^G         | Prompt for tags, with completion on all tags in all agenda files. |
| %^t         | Like %t, but prompt for date.  Similarly %^T, %^u, %^U.           |
|             | You may define a prompt like: %^{Please specify birthday}t.       |
|             | The default date is that of %t, see above.                        |
| %^C         | Interactive selection of which kill or clip to use.               |
| %^L         | Like %^C, but insert as link.                                     |
| %^{prop}p   | Prompt the user for a value for property prop.                    |
| %^{prompt}  | Prompt the user for a string and replace this sequence with it.   |
|             | A default value and a completion table ca be specified like this: |
|             | %^{prompt| default | completion2 | completion3 | ...}.            |
| %?          | After completing the template, position cursor here.              |
| %\1 ... %\N | Insert the text entered at the nth %^{prompt}, where N            |
|             | is a number, starting from 1.                                     |
+-------------+-------------------------------------------------------------------+
| file        | choose the file to add the entry                                  |
| olp         | choose the outlinepath for the entry                              |
| datetree    | automatically choose/insert the date tree i.e year>month>day      |
+-------------+-------------------------------------------------------------------+

| Item                                                 | Description             |
|------------------------------------------------------+-------------------------|
| %:date, %:date-timestamp, %d:date-timestamp-inactive | date, org timestamps    |
| %:from, %:fromname, %:fromaddress                    | sender, name/address    |
| %:to, %:toname, %:toaddress                          | recipient, name/address |
| %:maildir                                            | maildir for the message |
| %:message-id                                         | message-id              |
| %:path                                               | file system path        |
| %:subject                                            | message subject         |

#+begin_src emacs-lisp

  (setq org-capture-templates 
        `(("t" "Tasks")
          ("tt" "General Task" entry 
           (file+olp "~/Org/Tasks.org" "Inbox")
           "* TODO %? %^G\n:PROPERTIES:\n:Created: %U\n:LOCATION: %a\n:END:\n  %i" 
           :empty-lines 1)
          ("ts" "Scheduled Task" entry 
           (file+olp "~/Org/Tasks.org" "Inbox")
           "* TODO %? %^G\nSCHEDULED: %^t\n:PROPERTIES:\n:Created: %U\n:LOCATION: %a\n:END:\n  %i" 
           :empty-lines 1)
          ("td" "Task with deadline" entry 
           (file+olp "~/Org/Tasks.org" "Inbox")
           "* TODO %? %^G\nDEADLINE: %^t\n:PROPERTIES:\n:Created: %U\n:LOCATION: %a\n:END:\n  %i" 
           :empty-lines 1)

          ("w" "Work Tasks")
          ("wt" "Task" entry 
           (file+olp "~/Org/Work.org" "INBOX")
           "* TODO %? %^G:@work:\n:PROPERTIES:\n:Created: %U\n:LOCATION: %a\n:END:\n  %i" 
           :empty-lines 1)
          ("ws" "Scheduled Task" entry 
           (file+olp "~/Org/Work.org" "INBOX")
           "* TODO %? %^G:@work:\nSCHEDULED: %^t\n:PROPERTIES:\n:Created: %U\n:LOCATION: %a\n:END:\n  %i" 
           :empty-lines 1)
          ("wd" "Task with deadline" entry 
           (file+olp "~/Org/Work.org" "INBOX")
           "* TODO %? %^G:@work:\nDEADLINE: %^t\n:PROPERTIES:\n:Created: %U\n:LOCATION: %a\n:END:\n  %i" 
           :empty-lines 1)
          ("wn" "Work Note" entry 
           (file+olp "~/Org/Work.org" "NOTES")
           "* NOTE %? :@work\n:PROPERTIES:\n:CATEGORIES: %^{Categories}\n:Created: %U\n:LOCATION: %a\n:END:\n  %i")

          ("b" "Bookmarks / References")
          ("bl" "Links to visit" entry 
           (file+olp "~/Org/References.org" "Links")
           "* CONSUME [[%c][%^{Link Title}]] %^G\n:PROPERTIES:\n:Created: %U\n:END:\n  %i" 
           :empty-lines 1)
          ("bb" "Bookmark" entry 
           (file+olp "~/Org/References.org" "Bookmarks")
           "* BOOKMARK [[%c][%^{Link Title}]] %^G\n:PROPERTIES:\n:Created: %U\n:REPEAT_TO_STATE: BOOKMARK\n:LOGGING: DONE(!)\n:END:\n  %i")
          ("bb" "Bookmark" entry 
           (file+olp "~/Org/References.org" "Bookmarks")
           "* BOOKMARK [[%c][%^{Link Title}]] %^G\n:PROPERTIES:\n:Created: %U\n:REPEAT_TO_STATE: BOOKMARK\n:LOGGING: DONE(!)\n:END:\n  %i")

          ("n" "Notes")
          ("nn" "General Note" entry 
           (file "~/Org/Notes.org")
           "* NOTE %? %^G\n:PROPERTIES:\n:Created: %U\n:LOCATION: %a\n:END:\n  %i")
          ("nv" "Vocabulary" entry 
           (file+olp+datetree "~/Org/Notes/Vocabulary.org")
           "\n* %<%I:%M %p>\n%?\n"
           :clock-in :clock-resume :empty-lines 1)

          ("j" "Journal Entries")
          ("jj" "Journal" entry
           (file+olp+datetree "~/Org/Journal.org")
           "\n* %<%I:%M %p> - %? :journal:\n"
           :clock-in :clock-resume :empty-lines 1)

          ("h" "Habit Entries")
          ("hd" "Daily Habit" entry
           (file+olp "~/Org/Habits.org" "Daily Habits")
           "* TODO %?\nSCHEDULED: <%<%Y-%m-%d %a .+1d>>\n:PROPERTIES:\n:STYLE:    habit\n:Created: %U\n:END:\n"
           :empty-lines 1)
          ("hw" "Weekly Habit" entry
           (file+olp "~/Org/Habits.org" "Weekly Habits")
           "* TODO %?\nSCHEDULED: <%<%Y-%m-%d %a .+1w>>\n:PROPERTIES:\n:STYLE:    habit\n:Created: %U\n:END:\n"
           :empty-lines 1)
          ("hm" "Monthly Habit" entry
           (file+olp "~/Org/Habits.org" "Monthly Habits")
           "* TODO %?\nSCHEDULED: <%<%Y-%m-%d %a .+1m>>\n:PROPERTIES:\n:STYLE:    habit\n:Created: %U\n:END:\n"
           :empty-lines 1)
          ("hy" "Yearly Habit" entry
           (file+olp "~/Org/Habits.org" "Yearly Habits")
           "* TODO %?\nSCHEDULED: <%<%Y-%m-%d %a .+1y>>\n:PROPERTIES:\n:STYLE:    habit\n:Created: %U\n:END:\n"
           :empty-lines 1)
          ("hr" "Repeat Tasks" entry 
           (file "~/Org/Habits.org")
           "* REPEAT %?\nSCHEDULED: <%<%Y-%m-%d %a .+1d>>\n:PROPERTIES:\n:Created: %U\n:STYLE: habit\n:REPEAT_TO_STATE: REPEAT\n:LOGGING: DONE(!)\n:ARCHIVE: %%s_archive::* Habits\n:END:\n")

          ("P" "process-soon" entry 
           (file+headline "todo.org" "Todo")
           "* TODO %:fromname: %a %?\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+2d\"))")

          ("m" "Metrics Capture")
          ("mw" "Weight" table-line (file+headline "~/Org/Metrics.org" "Weight")
           "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)
          ))

#+end_src

** Refile

#+begin_src emacs-lisp

  (setq org-refile-targets '(
                             (nil :maxlevel . 1)
                             (org-agenda-files :maxlevel . 1)
                             ("Archive.org" :maxlevel . 1)
                             ;; ("Tasks.org" :maxlevel . 1)
                             ))

  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)

#+end_src

** Evil key bindings for org mode

#+begin_src emacs-lisp

  ;; (use-package evil-org
  ;;   :after org
  ;;   :hook (org-mode . (lambda () evil-org-mode))
  ;;   :config
  ;;   (require 'evil-org-agenda)
  ;;   (evil-org-agenda-set-keys))

  ;; (use-package evil-org
  ;;   :after org
  ;;   :hook (
  ;;          ;; (org-mode . evil-org-mode)
  ;;          ;; (org-agenda-mode . evil-org-mode)
  ;;          (evil-org-mode
  ;;           . (lambda ()
  ;;               (evil-org-set-key-theme
  ;;                '(navigation
  ;;                  todo
  ;;                  insert
  ;;                  textobjects
  ;;                  additional)))))
  ;;   :config
  ;;   (require 'evil-org-agenda)
  ;;   (setq org-special-ctrl-a/e t)
  ;;   (evil-org-agenda-set-keys))

#+end_src

** Use abbreviations instead of lengthy URL.

#+begin_src emacs-lisp

  ;; An example of how this works.
  ;; [[arch-wiki:Name_of_Page][Description]]
  ;; This overwrites the default list
  (setq org-link-abbrev-alist 
        '(("google"         . "http://www.google.com/search?q=")
          ("ddg"            . "https://duckduckgo.com/?q=")
          ("stack-exchange" . "https://emacs.stackexchange.com/a/")
          ("github"         . "https://github.com/")
          ("wiki"           . "https://en.wikipedia.org/wiki/")))

#+end_src

** Auto-show Markup Symbols

[[https://github.com/awth13/org-appear][org-appear]] makes it much easier to edit Org documents when =org-hide-emphasis-markers= is turned on.  It temporarily shows the emphasis markers around certain markup elements when you place your cursor inside of them.  No more fumbling around with ~=~ and ~*~ characters!

#+begin_src emacs-lisp

  (use-package org-appear
    :hook (org-mode . org-appear-mode)
    :custom
    ;; toggle links
    (org-appear-autolinks t) 
    ;; toggle subscripts and superscripts
    (org-appear-autosubmarkers t)
    ;; toggle org entities
    (org-appear-autoentities t)
    ;; toggle keywords in org-hidden-keywords
    (org-appear-autokeywords t)
    ;; delay toggle by 0.5 seconds
    (org-appear-delay 0.5)
  )

#+end_src

** Update Table of Contents on Save

If like me you want to automatically update the tables of contents of your =.org=
files, [[https://github.com/snosov1/toc-org][toc-org]] is the ideal package. To automate these tables of contents, you
only need to use the =:TOC:= tag in the first heading of these tables of contents.

#+begin_src emacs-lisp

  (use-package toc-org
    :after org
    :hook (org-mode . toc-org-enable))

#+end_src

** Encryption / Decryption

To encrypt and decrypt GPG files with =org-mode=, you need to add =org-crypt= in
your =org-modules=, install =gnupg= with your system manager package and create a
GPG key pair with the public key specified to =org-crypt=.

#+begin_src emacs-lisp

  (use-package org-crypt
    :after org
    :straight (:type built-in)
    :config (org-crypt-use-before-save-magic)
    :custom (org-crypt-key "C40959B80457F5A83E886FB429D0512FC8D22444"))

  (setq epa-file-encrypt-to "lokesh1197@yahoo.com")
  (setq epa-file-select-keys "auto")

#+end_src

** Roam

[[https://github.com/org-roam/org-roam][org-roam]] based on [[https://en.wikipedia.org/wiki/Zettelkasten][zettelkasten]] (box of paper slips in German) which is used for note taking and personal knowledge management.

New node uses the default template defined in [[https://www.orgroam.com/manual.html#The-Templating-System][org-roam-capture-templates]]

| =C-c n l= | org-roam-buffer-toggle         | show where the current node is referenced |
| =C-c n f= | org-roam-node-find             | go to a node (create if doesn't exist)    |
| =C-c n c= | org-roam-dailies-capture-today |                                           |
| =C-c n g= | org-roam-graph                 |                                           |

| =C-c n i= | org-roam-node-insert      |
| =C-c n I= | org-roam-insert-immediate |

| =org-id-get-create=  | Add header as a node                      |
| =org-roam-alias-add= | Add roam alias (can set multiple aliases) |

| *:unnarrowed t* | ensures that the full file will be displayed when captured |

*** Custom Functions

#+begin_src emacs-lisp

  (defvar my/org-roam-project-template
    '("p" "project" plain "** TODO %?"
      :if-new (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                             "#+title: ${title}\n#+category: ${title}\n#+filetags: Project\n"
                             ("Tasks"))))

  (defun my/org-roam-filter-by-tag (tag-name)
    (lambda (node)
      (member tag-name (org-roam-node-tags node))))

  (defun my/org-roam-list-notes-by-tag (tag-name)
    (mapcar #'org-roam-node-file
            (seq-filter
             (my/org-roam-filter-by-tag tag-name)
             (org-roam-node-list))))

  ;; similar to org roam node insert but doesn't take you to the new node
  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (push arg args))
          (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                    '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))

  (defun my/org-roam-goto-month ()
    (interactive)
    (org-roam-capture- :goto (when (org-roam-node-from-title-or-alias (format-time-string "%Y-%B")) '(4))
                       :node (org-roam-node-create)
                       :templates '(("m" "month" plain "\n* Goals\n\n%?* Summary\n\n"
                                     :if-new (file+head "%<%Y-%B>.org"
                                                        "#+title: %<%Y-%B>\n#+filetags: Project\n")
                                     :unnarrowed t))))

  (defun my/org-roam-goto-year ()
    (interactive)
    (org-roam-capture- :goto (when (org-roam-node-from-title-or-alias (format-time-string "%Y")) '(4))
                       :node (org-roam-node-create)
                       :templates '(("y" "year" plain "\n* Goals\n\n%?* Summary\n\n"
                                     :if-new (file+head "%<%Y>.org"
                                                        "#+title: %<%Y>\n#+filetags: Project\n")
                                     :unnarrowed t))))

  (defun my/org-roam-capture-task ()
    (interactive)
    ;; Add the project file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Capture the new task, creating the project file if necessary
    (org-roam-capture- :node (org-roam-node-read nil
                                                 ;; (my/org-roam-filter-by-tag "Project")
                                                 (lambda (node)
                                                   (member "Project" (org-roam-node-tags node))))
                       :templates (list my/org-roam-project-template)))

  ;; add roam files with tag projects to agenda files
  (defun my/org-roam-refresh-agenda-list ()
    (interactive)
    (setq org-agenda-files (my/org-roam-list-notes-by-tag "Project")))

  (defhydra my/org-roam-jump-menu (:hint nil)
    "
  ^Goto^           ^Capture^       ^Jump^
  ^^^^^^^^-------------------------------------------------
  _t_: today       _T_: today       _m_: current month
  _r_: tomorrow    _R_: tomorrow    _e_: current year
  _y_: yesterday   _Y_: yesterday   ^ ^
  _d_: date        ^ ^              ^ ^
  "
    ("t" org-roam-dailies-goto-today)
    ("r" org-roam-dailies-goto-tomorrow)
    ("y" org-roam-dailies-goto-yesterday)
    ("d" org-roam-dailies-goto-date)
    ("T" org-roam-dailies-capture-today)
    ("R" org-roam-dailies-capture-tomorrow)
    ("Y" org-roam-dailies-capture-yesterday)
    ("m" my/org-roam-goto-month)
    ("e" my/org-roam-goto-year)
    ("q" nil "quit"))

#+end_src

*** Configuration

#+begin_src emacs-lisp

  (use-package org-roam
    ;; :hook (after-init . org-roam-mode)
    :init
    ;; Hide update warning message
    (setq org-roam-v2-ack t)
    (setq my/daily-note-filename "%<%Y-%m-%d>.org.gpg"
          my/daily-note-header "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
    :custom
    (org-roam-directory "~/Org/Roam/")
    (org-roam-dailies-directory "~/Org/Journal/")
    (org-roam-completion-everywhere t)
    ;; (org-roam-graph-viewer "/usr/bin/qutebrowser")
    (org-roam-capture-templates
     '(("d" "default" plain "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org.gpg"
                           "#+title: ${title}\n#+author: Lokesh Mohanty\n#+filetags: %^G")
        :unnarrowed t)))

    (org-roam-dailies-capture-templates
     `(("d" "default" plain
        "* %?"
        :if-new (file+head ,my/daily-note-filename 
                           ,my/daily-note-header)
        :empty-lines 1)

       ("t" "task" entry
        "* TODO %?\n  %U\n  %a\n  %i"
        :if-new (file+head+olp ,my/daily-note-filename
                               ,my/daily-note-header
                               ("Tasks"))
        :empty-lines 1)

       ("l" "log" plain
        "** %<%I:%M %p> - %?"
        :if-new (file+head+olp ,my/daily-note-filename
                               ,my/daily-note-header
                               ("Log"))
        :empty-lines 1)

       ("j" "journal" entry
        "** %<%I:%M %p> - %^{Title}  :journal:\n\n%?\n\n"
        :if-new (file+head+olp ,my/daily-note-filename
                               ,my/daily-note-header
                               ("Journal"))
        :empty-lines 1)

       ("m" "meeting" entry
        "** %<%I:%M %p> - %^{Meeting Title}  :meeting:\n\n%?\n\n"
        :if-new (file+head+olp ,my/daily-note-filename
                               ,my/daily-note-header
                               ("Meetings"))
        :empty-lines 1)))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n d" . my/org-roam-jump-menu/body)
           ("C-c n c" . org-roam-dailies-capture-today)
           ("C-c n t" . my/org-roam-capture-task)
           ("C-c n g" . org-roam-graph)
           :map org-mode-map
           (("C-c n i" . org-roam-node-insert)
            ("C-c n I" . org-roam-insert-immediate))
           )
    :config 
    (org-roam-db-autosync-enable)
    ;; (org-roam-db-autosync-mode)

    ;; Build the agenda list the first time for the session
    (my/org-roam-refresh-agenda-list)
    )

#+end_src

** Reveal (Presentation using reveal.js)

#+begin_src emacs-lisp

  (use-package ox-reveal
     :straight nil)
  ;; (use-package org-reveal
  ;;   :straight nil)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-org-reveal"

#+end_src

** Ql (query language for agenda)

[[https://github.com/alphapapa/org-ql][org-ql]] is great at querieng agenda lists

#+begin_src emacs-lisp

  (use-package org-ql
    :after org)

#+end_src


** Languages

Let's specify languages extra to Org Mode to compile them directly into =.org=
files.

#+begin_src emacs-lisp

  ;; ;; (use-package jupyter :straight nil :after org)
  ;; (use-package python :straight (:type built-in) :after org)
  ;; (use-package ob-C :straight (:type built-in) :after org)
  ;; (use-package ob-css :straight (:type built-in) :after org)
  ;; (use-package ob-dot :straight (:type built-in) :after org)
  ;; ;; (use-package ob-ein :straight (:type built-in) :after org)
  ;; (use-package ob-emacs-lisp :straight (:type built-in) :after org)
  ;; (use-package ob-gnuplot :straight (:type built-in) :after org)
  ;; (use-package ob-java :straight (:type built-in) :after org)
  ;; (use-package ob-js :straight (:type built-in) :after org)
  ;; (use-package ob-latex
  ;;   :straight (:type built-in)
  ;;   :after org
  ;;   :custom (org-latex-compiler "xelatex"))
  ;; (use-package ob-ledger :straight (:type built-in) :after org)
  ;; (use-package ob-makefile :straight (:type built-in) :after org)
  ;; (use-package ob-org :straight (:type built-in) :after org)
  ;; ;; (use-package ob-plantuml
  ;; ;;   :straight (:type built-in)
  ;; ;;   :after org
  ;; ;;   :custom (org-plantuml-jar-path (expand-file-name (format "%s/plantuml.jar" xdg-lib))))
  ;; (use-package ob-python :straight (:type built-in) :after org)
  ;; (use-package ob-shell :straight (:type built-in) :after org)
  ;; (use-package ob-sql :straight (:type built-in) :after org)

#+end_src

** Wild Notifier

Finally, I use [[https://github.com/akhramov/org-wild-notifier.el][org-wild-notifier]] to get notifications about TODO items in
=org-agenda=.

#+begin_src emacs-lisp

  ;; (use-package org-wild-notifier
  ;;   :after org
  ;;   :custom
  ;;   (alert-default-style 'libnotify)
  ;;   (org-wild-notifier-notification-title "Agenda Reminder")
  ;;   :config (org-wild-notifier-mode))

#+end_src

** Bullets

#+begin_src emacs-lisp

  ;; (use-package org-habit)
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    ;; ("◉" "○" "●" "►" "▸")
    :custom (org-bullets-bullet-list '("●")))
  ;; (add-hook 'org-mode-hook 'org-bullets-mode)

#+end_src

** Export to pdf via latex

#+begin_src emacs-lisp

  ;; (setq org-alphabetical-lists t)

  ;; ;; Explicitly load required exporters
  ;; (require 'ox-html)
  ;; (require 'ox-latex)
  ;; (require 'ox-ascii)

  ;; ;; Enable using listings for code highlighting 
  ;; (setq org-latex-listings 't)

  ;; (with-eval-after-load 'ox-latex
  ;; (add-to-list 'org-latex-classes
  ;;              '("org-plain-latex"
  ;;                "\\documentclass{article}
  ;;            [NO-DEFAULT-PACKAGES]
  ;;            [PACKAGES]
  ;;            [EXTRA]"
  ;;                ("\\section{%s}" . "\\section*{%s}")
  ;;                ("\\subsection{%s}" . "\\subsection*{%s}")
  ;;                ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  ;;                ("\\paragraph{%s}" . "\\paragraph*{%s}")
  ;;                ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

#+end_src

** Prevent M-Ret from adding blank lines

#+begin_src emacs-lisp
  ;; (setq org-blank-before-new-entry (quote ((heading . nil)
  ;;                                          (plain-list-item . nil))))
#+end_src

** Export to manpage format

#+begin_src emacs-lisp
  ;; (use-package ox-man
  ;;   :straight (:type built-in))
#+end_src

** Drag and drop into org files

#+begin_src emacs-lisp

  ;; Drag and drop images to org files
  (use-package org-download
    :after org
    :config
    (setq-default org-download-image-dir "~/Pictures/Emacs")
    (add-hook 'dired-mode-hook 'org-download-enable)
  )

#+end_src

* MAIL MANAGEMENT
** Initialization

Run *mu init* to initialize mu for email addresses. Required only while changing email addresses

#+begin_src shell

  mu init --maildir=~/Mail --my-address=lokesh1197@gmail.com --my-address=lokesh.mohanty@e-arc.com

#+end_src

Run *mu index* for indexing

#+begin_src shell

  mu index

#+end_src

Run *mbsync* to sync mails

#+begin_src shell

  mbsync -a

#+end_src

** Mu4e

Run *pkill mu* in case of mu lock error

| mu4e-quit | stop mail sync |

*** Basic Config

#+begin_src emacs-lisp

  (use-package mu4e
    ;; :defer 20 ; Wait until 20 seconds after startup
    :init
    (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
    :config
    ;; Refresh mail using isync every 10 minutes
    (setq mu4e-update-interval (* 15 60))
    (setq mu4e-get-mail-command "mbsync -c ~/.config/mu4e/mbsyncrc -a")
    (setq mu4e-maildir "~/Maildir")

    ;; Make sure that moving a message (like to Trash) causes the
    ;; message to get a new file name.  This helps to avoid the
    ;; dreaded "UID is N beyond highest assigned" error.
    ;; See this link for more info: https://stackoverflow.com/a/43461973
    (setq mu4e-change-filenames-when-moving t)

    ;; Use mu4e for sending e-mail
    (setq mail-user-agent 'mu4e-user-agent)
    ;; Use emacs for sending mail
    (setq message-send-mail-function 'smtpmail-send-it)

    ;; Make sure plain text mails flow correctly for recipents
    (setq mu4e-compose-format-flowed t)

    ;; don't keep message buffers around
    (setq message-kill-buffer-on-exit t)

    (setq mu4e-attachment-dir "~/Downloads")
    (setq mu4e-view-show-images t)

    ;; (setq mu4e-html2text-command "html2text -utf8 -nobs -width 72")
    ;; (setq mu4e-html2text-command "w3m -T text/html")
    ;; (add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)

    ;; (setq mu4e-main-buffer-hide-personal-addresses t)
    ;; (setq starttls-use-gnutls t)

#+end_src

*** Contexts (Multiple Email Configuration)

#+begin_src emacs-lisp

  ;; Set up contexts for email accounts
  (setq mu4e-contexts
        `(,(make-mu4e-context
            :name "Gmail"
            :match-func (lambda (msg) (when msg
                                        (string-prefix-p "/lokesh-gmail" (mu4e-message-field msg :maildir))))
            :vars '(
                    (user-full-name . "Lokesh Mohanty")
                    (user-mail-address . "lokesh1197@gmail.com")
                    (smtpmail-smtp-server . "smtp.gmail.com")
                    (smtpmail-stream-type . ssl)
                    (smtpmail-smtp-service . 465)
                    (mu4e-sent-folder . "/lokesh-gmail/[Gmail]/Sent Mail")
                    (mu4e-trash-folder . "/lokesh-gmail/[Gmail]/Trash")
                    (mu4e-drafts-folder . "/lokesh-gmail/[Gmail]/Drafts")
                    (mu4e-refile-folder . "/lokesh-gmail/[Gmail]/Archive")
                    ;; (mu4e-sent-messages-behavior . sent)
                    ))
          ,(make-mu4e-context
            :name "Yahoo"
            :match-func (lambda (msg) 
                          (when msg
                            (string-prefix-p "/lokesh-yahoo" (mu4e-message-field msg :maildir))))
            :vars '(
                    (user-full-name . "Lokesh Mohanty")
                    (user-mail-address . "lokesh1197@yahoo.com")
                    (smtpmail-smtp-server . "smtp.mail.yahoo.com")
                    (smtpmail-stream-type . ssl)
                    (smtpmail-smtp-service . 465)
                    (mu4e-sent-folder . "/lokesh-yahoo/Sent")
                    (mu4e-trash-folder . "/lokesh-yahoo/Trash")
                    (mu4e-drafts-folder . "/lokesh-yahoo/Drafts")
                    (mu4e-refile-folder . "/lokesh-yahoo/Archive")
                    ))
          ,(make-mu4e-context
            :name "Work"
            :match-func (lambda (msg) (when msg
                                        (string-prefix-p "/office-arc" (mu4e-message-field msg :maildir))))
            :vars '(
                    (user-full-name . "Lokesh Mohanty")
                    (user-mail-address . "lokesh.mohanty@e-arc.com")
                    (smtpmail-smtp-server . "smtp.office365.com")
                    (smtpmail-stream-type . starttls)
                    (smtpmail-smtp-service . 587)
                    (mu4e-sent-folder . "/office-arc/Sent Items")
                    (mu4e-trash-folder . "/office-arc/Deleted Items")
                    (mu4e-drafts-folder . "/office-arc/Drafts")
                    (mu4e-refile-folder . "/office-arc/Archive")
                    ))
          ,(make-mu4e-context
            :name "Befreier"
            :match-func (lambda (msg) 
                          (when msg
                            (string-prefix-p "/befreier-gmail" (mu4e-message-field msg :maildir))))
            :vars '(
                    (user-full-name . "Lokesh Mohanty")
                    (user-mail-address . "befreier19@gmail.com")
                    (smtpmail-smtp-server . "smtp.gmail.com")
                    (smtpmail-stream-type . ssl)
                    (smtpmail-smtp-service . 465)
                    (mu4e-sent-folder . "/befreier-gmail/[Gmail]/Sent Mail")
                    (mu4e-trash-folder . "/befreier-gmail/[Gmail]/Trash")
                    (mu4e-drafts-folder . "/befreier-gmail/[Gmail]/Drafts")
                    (mu4e-refile-folder . "/befreier-gmail/[Gmail]/Archive")
                    ))
          ,(make-mu4e-context
            :name "Ineffable"
            :match-func (lambda (msg) 
                          (when msg
                            (string-prefix-p "/ineffable-gmail" (mu4e-message-field msg :maildir))))
            :vars '(
                    (user-full-name . "InEffable1197")
                    (user-mail-address . "ineffable97@gmail.com")
                    (smtpmail-smtp-server . "smtp.gmail.com")
                    (smtpmail-stream-type . ssl)
                    (smtpmail-smtp-service . 465)
                    (mu4e-sent-folder . "/ineffable-gmail/[Gmail]/Sent Mail")
                    (mu4e-trash-folder . "/ineffable-gmail/[Gmail]/Trash")
                    (mu4e-drafts-folder . "/ineffable-gmail/[Gmail]/Drafts")
                    (mu4e-refile-folder . "/ineffable-gmail/[Gmail]/Archive")
                    ))
          ))
  (setq mu4e-context-policy 'pick-first)

#+end_src

*** Custom Functions

#+begin_src emacs-lisp

  (defun my/mu4e-server ()
    "Start a server named 'other' for mail and chat"
    (interactive)
    (let ((server-name "other"))
      (server-start)))

  (defun my-mu4e-choose-signature ()
    "Insert one of a number of signatures"
    (interactive)
    (let ((message-signature
           (mu4e-read-option "Signature:"
                             '(("formal" .
                                (concat
                                 "Lokesh Mohanty\n"
                                 "Software Engineer\n" 
                                 "OpenSource Team\n" 
                                 "ARC Document Solutions\n"))
                               ("informal" .
                                "Lokesh Mohanty\n")))))
      (message-insert-signature)))

  (add-hook 'mu4e-compose-mode-hook
            (lambda () (local-set-key (kbd "C-c C-w") #'my-mu4e-choose-signature)))

#+end_src

*** Mail Directory Shortcuts

#+begin_src emacs-lisp

  ;; setup some handy shortcuts
  (setq mu4e-maildir-shortcuts
        '(("/lokesh-gmail/Inbox"      . ?g)
          ("/lokesh-yahoo/Inbox"      . ?y)
          ("/befreier-gmail/Inbox"    . ?b)
          ("/ineffable-gmail/Inbox"   . ?i)
          ("/office-arc/Inbox"        . ?w)
          ("/office-arc/Sent Items"   . ?s)))

#+end_src

*** Bookmarks

#+begin_src emacs-lisp

  (add-to-list 'mu4e-bookmarks
               (make-mu4e-bookmark
                :name "My Work Inbox"
                :query "maildir:/office-arc/Inbox"
                :key ?w)
               (make-mu4e-bookmark
                :name "My Work Inbox Unread"
                :query "maildir:/office-arc/Inbox not flag:trashed"
                :key ?w))

  (add-to-list
   'mu4e-bookmarks
   '("flag:unread NOT flag:trashed AND (flag:list OR from:lokesh1197@yahoo.com)"
     "Unread bulk messages" ?l))

  ;; (add-to-list
  ;;  'mu4e-bookmarks
  ;;  '("flag:unread NOT flag:trashed AND NOT flag:list AND (maildir:\"/royal holloway\" OR maildir:/INBOX)"
  ;;    "Unread messages addressed to me" ?i))

  (add-to-list
   'mu4e-bookmarks
   '("mime:application/* AND NOT mime:application/pgp* AND (maildir:**/Inbox)"
     "Messages with attachments for me." ?d) t)

  (add-to-list
   'mu4e-bookmarks
   '("flag:flagged"
     "Flagged messages" ?f) t)

  (add-to-list
   'mu4e-bookmarks
   '("(maildir:\"lokesh-gmail/[Gmail]/Sent Mail\" OR maildir:\"lokesh-yahoo/Sent Mail\" OR mailir:\"office-arc/Sent Items\") AND date:7d..now"
     "Sent in last 7 days" ?s) t)

#+end_src

*** To Try

#+begin_src emacs-lisp

  ;; Prevent mu4e from permanently deleting trashed items
  ;; This snippet was taken from the following article:
  ;; http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/
  ;; (defun remove-nth-element (nth list)
  ;;   (if (zerop nth) (cdr list)
  ;;     (let ((last (nthcdr (1- nth) list)))
  ;;       (setcdr last (cddr last))
  ;;       list)))
  ;; (setq mu4e-marks (remove-nth-element 5 mu4e-marks))
  ;; (add-to-list 'mu4e-marks
  ;;              '(trash
  ;;                :char ("d" . "▼")
  ;;                :prompt "dtrash"
  ;;                :dyn-target (lambda (target msg) (mu4e-get-trash-folder msg))
  ;;                :action (lambda (docid msg target)
  ;;                          (mu4e~proc-move docid
  ;;                                          (mu4e~mark-check-target target) "-N"))))

  ;; Display options
  ;; (setq mu4e-view-show-images t)
  ;; (setq mu4e-view-show-addresses 't)

  ;; Composing mail
  ;; (setq mu4e-compose-dont-reply-to-self t)

  ;; Signing messages (use mml-secure-sign-pgpmime)
  ;; (setq mml-secure-openpgp-signers '("53C41E6E41AAFE55335ACA5E446A2ED4D940BF14"))

  ;; setup some handy shortcuts
  ;; you can quickly switch to your Inbox -- press ``ji''
  ;; then, when you want archive some messages, move them to
  ;; the 'All Mail' folder by pressing ``ma''.
  (setq mu4e-maildir-shortcuts
        '(("/lokesh-gmail/Inbox"      . ?g)
          ("/lokesh-yahoo/Inbox"      . ?y)
          ("/office-arc/Inbox"        . ?w)
          ("/office-arc/Sent Items"   . ?s)))

#+end_src

*** Kebindings

#+begin_src emacs-lisp

  ;; (setq my/mu4e-inbox-query
  ;;       "(maildir:/lokesh-gmail/Inbox OR maildir:/office-arc/Inbox) AND flag:unread")

  ;; (defun my/go-to-inbox ()
  ;;   (interactive)
  ;;   (mu4e-headers-search my/mu4e-inbox-query))

  ;; (leader-key
  ;;   "m"  '(:ignore t :which-key "mail")
  ;;   "mm" 'mu4e
  ;;   "mc" 'mu4e-compose-new
  ;;   "mi" 'my/go-to-inbox
  ;;   "ms" 'mu4e-update-mail-and-index)

  ;; Start mu4e in the background so that it syncs mail periodically
  ;; Commented to prevent it from starting in all emacs sessions
  ;; (mu4e t)
  )

#+end_src

*** Mu4e Alerts

#+begin_src emacs-lisp

  ;; (use-package mu4e-alert
  ;;   :hook ((after-init . mu4e-alert-enable-mode-line-display)
  ;;          (after-init . mu4e-alert-enable-notifications))
  ;;   :config 
  ;;   ;; Show unread emails from all inboxes
  ;;   ;; (setq mu4e-alert-interesting-mail-query my/mu4e-inbox-query)

  ;;   ;; Show notifications for mails already notified
  ;;   ;; (setq mu4e-alert-notify-repeated-mails nil)

  ;;   ;; Set notify-send for alert
  ;;   (mu4e-alert-set-default-style 'libnotify)
  ;;   (mu4e-alert-enable-notifications))

#+end_src

** Org Msg

Great tool for using outlook style email and replies.
Documentation: https://github.com/jeremy-compostella/org-msg

| C-c C-e | org-msg-preview      |
| C-c C-k | message-kill-buffer  |
| C-c C-s | message-goto-subject |
| C-c C-b | org-msg-goto-body    |
| C-c C-a | org-msg-attach       |
| C-c C-c | org-ctrl-c-ctrl-c    |

- Quotes: >, >>, >>>, ...

#+begin_src emacs-lisp

  (use-package org-msg
    :after org
    :config
    (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
          org-msg-startup "hidestars indent inlineimages"
          org-msg-greeting-fmt "\nHi%s,\n\n"
          org-msg-recipient-names '(("lokesh.mohanty@e-arc.com" . "Lokesh Mohanty"))
          org-msg-greeting-name-limit 3
          org-msg-default-alternatives '((new		. (text html))
                                         (reply-to-html	. (text html))
                                         (reply-to-text	. (text)))
          org-msg-convert-citation t
          org-msg-signature (concat
                              "\nRegards,\n\n"
                              "#+begin_signature\n"
                              "--\n"
                              "*Lokesh Mohanty*\n"
                              "#+end_signature"))
    (org-msg-mode))

#+end_src

** Org Mime

| org-mime-htmlize               | to convert org mail to html mail |
| org-mime-edit-mail-in-org-mode | edit mail in org mode            |

#+begin_src emacs-lisp

  ;; (use-package org-mime
  ;;   :config
  ;;   (setq org-mime-export-options 
  ;;         '(
  ;;           :section-numbers nil
  ;;           :with-author nil
  ;;           :with-toc nil))

  ;;   ;; Prompts whether to send email if the email is not htmlized
  ;;   (add-hook 'message-send-hook 'org-mime-confirm-when-no-multipart)
  ;;   ;; Automatically htmlize email before sending
  ;;   ;; (add-hook 'message-send-hook 'org-mime-htmlize)


  ;;   ;; Custom CSS
  ;;   (add-hook 'org-mime-html-hook
  ;;             (lambda ()
  ;;               (org-mime-change-element-style
  ;;                "pre" (format "color: %s; background-color: %s; padding: 0.5em;" 
  ;;                              "#E6E1DC" "#232323")))))

#+end_src

** Tips

General commands:
| Command                         | evil-mu4e | Alternative |
|---------------------------------+-----------+-------------|
| Jump to maildir                 | J         |             |
| Update                          | u         |             |
| Kill update mail process        | x         |             |
| Next message                    | C-j       |             |
| Previous message                | C-k       |             |
| Mark the current thread as read | T, !      |             |
| Compose message                 | cc        | C           |
| Compose edit**                  | ce        | E           |
| Compose forward**               | cf        | F           |
| Compose reply                   | cr        | R           |
| Change sorting***               | o         | O           |
| Rerun search                    | gr        |             |
| Toggle include related          | zr        |             |
| Toggle threading                | zt        |             |
| Toggle hide cited               | za        |             |
| Skip duplicates                 | zd        |             |
| Show log                        | gl        |             |
| Select other view               | gv        |             |
| Save attachement(s)             | p         | P           |
| Save url                        | yu        |             |
| Go to url                       | gx        |             |
| Fetch url                       | gX        |             |

*** Headers Mode

Key Bindings:

| Key | Evil  | Command                             | Description                          |
|-----+-------+-------------------------------------+--------------------------------------|
|     |       | *Movement*                            |                                      |
| ~C-n~ | ~j~     | =next-line=                           | Moves to the next header line        |
| ~C-p~ | ~k~     | =previous-line=                       | Moves to the previous header line    |
| ~[[~  | ~[[~    | =mu4e-headers-prev-unread=            | Moves to previous unread message     |
| ~]]~  | ~]]~    | =mu4e-headers-next-unread=            | Moves to next unread message         |
| ~j~   | ~J~     | =mu4e~headers-jump-to-maildir=        | Jump to another mail directory       |
|     |       |                                     |                                      |
|     |       | *Toggles*                             |                                      |
| ~P~   | ~zt~    | =mu4e-headers-toggle-threading=       | Toggles threaded message display     |
| ~W~   | ~zr~    | =mu4e-headers-toggle-include-related= | Toggles related message display      |
|     |       |                                     |                                      |
|     |       | *Marking*                             |                                      |
| ~d~   | ~d~     | =mu4e-headers-mark-for-trash=         | Marks message for deletion           |
| ~m~   | ~m~     | =mu4e-headers-mark-for-move=          | Marks message for move to folder     |
| ~+~   | ~+~     | =mu4e-headers-mark-for-flag=          | Marks message for flagging           |
| ~-~   | ~-~     | =mu4e-headers-mark-for-unflag=        | Marks message for unflagging         |
| ~%~   | ~%~     | =mu4e-headers-mark-pattern=           | Marks based on a regex pattern       |
| ~u~   | ~u~     | =mu4e-headers-mark-for-unmark=        | Removes mark for message             |
| ~U~   | ~U~     | =mu4e-mark-unmark-all=                | Unmarks all marks in the view        |
| ~x~   | ~x~     | =mu4e-mark-execute-all=               | Executes all marks in the view       |
|     |       |                                     |                                      |
|     |       | *Searching*                           |                                      |
| ~s~   | ~s~     | =mu4e-headers-search=                 | Search all e-mails                   |
| ~S~   | ~S~     | =mu4e-headers-search-edit=            | Edit current search (useful!)        |
| ~/~   | ~/~     | =mu4e-headers-search-narrow=          | Narrow down the current results      |
| ~b~   | ~b~     | =mu4e-headers-search-bookmark=        | Select a bookmark to search with     |
| ~B~   | ~B~     | =mu4e-headers-search-bookmark-edit=   | Edit bookmark before search          |
| ~g~   | ~gr~    | =mu4e-rerun-search=                   | Rerun the current search             |
|     |       |                                     |                                      |
|     |       | *Composing*                           |                                      |
| ~C~   | ~C~, ~cc~ | =mu4e-compose-new=                    | Compose a new e-mail                 |
| ~R~   | ~R~, ~cr~ | =mu4e-compose-reply=                  | Compose a reply to selected email    |
| ~F~   | ~F~, ~cf~ | =mu4e-compose-forward=                | Compose a forward for selected email |
| ~E~   | ~E~, ~ce~ | =mu4e-compose-edit=                   | Edit selected draft message          |
|     |       |                                     |                                      |
|     |       | *Other Actions*                       |                                      |
| ~q~   | ~q~     | =mu4e~headers-quit-buffer=            | Quit the headers view                |

Controlling the number of messages visible:

- =mu4e-headers-results-limit=: The number of messages to display in mail listings (default 500)
- =mu4e-headers-full-search=: If =t=, shows all messages, ignoring limit

You can toggle =mu4e-headers-full-search= with =M-x mu4e-headers-toggle-full-search=!

*** View Mode

Many of the same keybindings work!  Marking keys work on the currently viewed message.

| Key | Evil | Command                  | Description                            |
|-----+------+--------------------------+----------------------------------------|
|     |      | *Movement*                 |                                        |
| ~C-n~ | ~j~    | =next-line=                | Moves to the next line in message      |
| ~C-p~ | ~k~    | =previous-line=            | Moves to the previous line in message  |
| ~n~   | ~C-j~  | =mu4e-view-headers-next=   | Moves to next email in header list     |
| ~p~   | ~C-k~  | =mu4e-view-headers-prev=   | Moves to previous email in header list |
| ~[[~  | ~[[~   | =mu4e-headers-prev-unread= | Moves to previous unread message       |
| ~]]~  | ~]]~   | =mu4e-headers-next-unread= | Moves to next unread message           |

* PDF

#+begin_src emacs-lisp

  (use-package pdf-tools
    :magic ("%PDF" . pdf-view-mode)
    :init (pdf-tools-install :no-query))
    
  (use-package pdf-view
    :straight (:type built-in)
    :after pdf-tools
    :bind (:map pdf-view-mode-map
                ("C-s" . isearch-forward)
                ("d" . pdf-annot-delete)
                ("h" . pdf-annot-add-highlight-markup-annotation)
                ("t" . pdf-annot-add-text-annotation))
    :custom
    (pdf-view-display-size 'fit-page)
    (pdf-view-resize-factor 1.1)
    ;; Avoid searching for unicodes to speed up pdf-tools.
    (pdf-view-use-unicode-ligther nil)
    ;; Enable HiDPI support, at the cost of memory.
    (pdf-view-use-scaling t))

#+end_src

* BROWSER SHORTCUTS
** Get wiki summary

Occasionally, I would like to have a summary of a term directly on GNU Emacs,
before that I would like to know more about this term. The [[https://github.com/jozefg/wiki-summary.el][wiki-summary]] package
allows this behavior.

#+begin_src emacs-lisp

  (use-package wiki-summary
    :commands (wiki-summary wiki-summary-insert)
    ;; :bind ("C-c W" . wiki-summary)
    ;; :preface
    ;; (defun my/format-summary-in-buffer (summary)
    ;;   "Given a summary, sticks it in the *wiki-summary* buffer and displays
    ;;    the buffer."
    ;;   (let ((buf (generate-new-buffer "*wiki-summary*")))
    ;;     (with-current-buffer buf
    ;;       (princ summary buf)
    ;;       (fill-paragraph)
    ;;       (goto-char (point-min))
    ;;       (view-mode))
    ;;     (pop-to-buffer buf)))
    ;; :config
    ;; (advice-add 'wiki-summary/format-summary-in-buffer
    ;;             :override #'my/format-summary-in-buffer)
  )

#+end_src

** Thesaurus

#+begin_src emacs-lisp

  ;; (use-package thesaurus
  ;;   :custom
  ;;   (thesaurus-prompt-mechanism 'dropdown-list)
  ;;   :config
  ;;   (setq thesaurus-bhl-api-key "8bf382e14f4a876ceebc0a6a93cfe499"))

  (use-package powerthesaurus)

#+end_src

* SHARING
** Webpaste

The current bindings are overwritten by other binding

#+begin_src emacs-lisp

  (use-package webpaste
    ;; :defer 0.4
    :bind (("C-c C-p C-b" . webpaste-paste-buffer)
           ("C-c C-p C-p" . webpaste-paste-buffer-or-region)
           ("C-c C-p C-r" . webpaste-paste-region))
    :custom (webpaste-provider-priority '("dpaste.org" "dpaste.com" "ix.io")))

#+end_src

** Imgbb

#+begin_src emacs-lisp

  (use-package imgbb
    :commands imgbb-upload
    :bind ("C-c C-p C-i" . imgbb-upload))

#+end_src

* DAEMONS

[[https://github.com/cbowdon/daemons.el][Daemons.el]] helps in managing init system daemons (services).

| Command         | Key in =*daemons*= buffer |
|-----------------+-------------------------|
| =daemons-status=  | RET                     |
| =daemons-start=   | s                       |
| =daemons-stop=    | S                       |
| =daemons-reload=  | r                       |
| =daemons-restart= | R                       |
| =daemons-enable=  | e                       |
| =daemons-disable= | d                       |

#+begin_src emacs-lisp

  (use-package daemons
    :commands daemons)

#+end_src

* ELFEED

[[https://github.com/skeeto/elfeed][Elfeed]] looks like a great RSS feed reader.  Not using it much yet, but definitely looking forward to using it to keep track of a few different blogs I follow using Twitter.  Also seems to be great for following subreddits like /r/Emacs.

#+begin_src emacs-lisp
  (use-package elfeed
    :config
    (setq elfeed-search-feed-face ":foreground #fff :weight bold"
          elfeed-feeds (quote
                         (("https://www.reddit.com/r/linux.rss" reddit linux)
                          ("https://www.reddit.com/r/commandline.rss" reddit commandline)
                          ("https://www.reddit.com/r/emacs.rss" reddit emacs)
                          ("https://www.gamingonlinux.com/article_rss.php" gaming linux)
                          ("https://hackaday.com/blog/feed/" hackaday linux)
                          ("https://opensource.com/feed" opensource linux)
                          ("https://linux.softpedia.com/backend.xml" softpedia linux)
                          ("https://itsfoss.com/feed/" itsfoss linux)
                          ("https://www.zdnet.com/topic/linux/rss.xml" zdnet linux)
                          ("https://www.phoronix.com/rss.php" phoronix linux)
                          ("http://feeds.feedburner.com/d0od" omgubuntu linux)
                          ("https://www.computerworld.com/index.rss" computerworld linux)
                          ("https://www.networkworld.com/category/linux/index.rss" networkworld linux)
                          ("https://www.techrepublic.com/rssfeeds/topic/open-source/" techrepublic linux)
                          ("https://betanews.com/feed" betanews linux)
                          ("http://lxer.com/module/newswire/headlines.rss" lxer linux)
                          ("https://distrowatch.com/news/dwd.xml" distrowatch linux)))))

  (use-package elfeed-goodies
    :init
    (elfeed-goodies/setup)
    :config
    (setq elfeed-goodies/entry-pane-size 0.5))

  (add-hook 'elfeed-show-mode-hook 'visual-line-mode)
  (evil-define-key 'normal elfeed-show-mode-map
    (kbd "C-j") 'elfeed-goodies/split-show-next
    (kbd "C-k") 'elfeed-goodies/split-show-prev)
  (evil-define-key 'normal elfeed-search-mode-map
    (kbd "C-j") 'elfeed-goodies/split-show-next
    (kbd "C-k") 'elfeed-goodies/split-show-prev)
    
#+end_src

* Chat

- /join -> join a channel
- /part -> leave a channel
- /list <search-string> -> list channels
- /query <username> -> private conversation
- /msg <username> <message> -> private conversation without a new buffer
- /nick <username>  -> change username
- /quit <message>  -> disconnect from server
- /reconnect -> reconnect to server
- /help
- NickServ, help

** Tracking

#+begin_src emacs-lisp

  (use-package tracking
    :defer t
    :config
    (setq tracking-faces-priorities '(all-the-icons-pink
                                      all-the-icons-lgreen
                                      all-the-icons-lblue))
    (setq tracking-frame-behavior nil))

#+end_src

** Telegram

#+begin_src emacs-lisp

  ;; ;; Add faces for specific people in the modeline.  There must
  ;; ;; be a better way to do this.
  ;; (defun dw/around-tracking-add-buffer (original-func buffer &optional faces)
  ;;   (let* ((name (buffer-name buffer))
  ;;          (face (cond ((s-contains? "Maria" name) '(all-the-icons-pink))
  ;;                      ((s-contains? "Alex " name) '(all-the-icons-lgreen))
  ;;                      ((s-contains? "Steve" name) '(all-the-icons-lblue))))
  ;;          (result (apply original-func buffer (list face))))
  ;;     (dw/update-polybar-telegram)
  ;;     result))

  ;; (defun dw/after-tracking-remove-buffer (buffer)
  ;;   (dw/update-polybar-telegram))

  ;; (advice-add 'tracking-add-buffer :around #'dw/around-tracking-add-buffer)
  ;; (advice-add 'tracking-remove-buffer :after #'dw/after-tracking-remove-buffer)
  ;; (advice-remove 'tracking-remove-buffer #'dw/around-tracking-remove-buffer)

  ;; ;; Advise exwm-workspace-switch so that we can more reliably clear tracking buffers
  ;; ;; NOTE: This is a hack and I hate it.  It'd be great to find a better solution.
  ;; (defun dw/before-exwm-workspace-switch (frame-or-index &optional force)
  ;;   (when (fboundp 'tracking-remove-visible-buffers)
  ;;     (when (eq exwm-workspace-current-index 0)
  ;;       (tracking-remove-visible-buffers))))

  ;; (advice-add 'exwm-workspace-switch :before #'dw/before-exwm-workspace-switch)

  (use-package telega
    :straight nil
    :commands telega
    :config
    (setq telega-user-use-avatars nil
          telega-use-tracking-for '(any pin unread)
          telega-chat-use-markdown-formatting t
          telega-emoji-use-images t
          telega-completing-read-function #'ivy-completing-read
          telega-msg-rainbow-title nil
          telega-chat-fill-column 75)
  )

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-telega"

#+end_src

** Discord

=elcord= makes it possible to notify Discord when Emacs is "playing" using the Game Activity feature.  Since I run the Discord Flatpak from Flathub, I have to [[https://github.com/flathub/com.discordapp.Discord/wiki/Rich-Precense-(discord-rpc)#regular-unsandboxed-apps][expose the socket]] file via symbolic link like so:

#+begin_src shell :tangle no

  ln -sf {app/com.discordapp.Discord,$XDG_RUNTIME_DIR}/discord-ipc-0

#+end_src

#+begin_src emacs-lisp

  ;; (use-package elcord
  ;;   :straight t
  ;;   :disabled dw/is-termux
  ;;   :custom
  ;;   (elcord-display-buffer-details nil)
  ;;   :config
  ;;   (elcord-mode))

#+end_src

** ERC

[[https://www.gnu.org/software/emacs/manual/html_node/erc/Modules.html][ERC]] is the big kahuna of Emacs IRC clients.  At first I thought it was too bulky, but after using =circe= and =rcirc= I started to appreciate some of the features it provides.  The "static center" fill mode is really awesome.

#+begin_src emacs-lisp

  (defun dw/on-erc-track-list-changed ()
    (dolist (buffer erc-modified-channels-alist)
      (tracking-add-buffer (car buffer))))

  (use-package erc-hl-nicks
    :after erc)


  (use-package erc-image
    :after erc)

  (use-package erc
    :straight (:type built-in)
    :hook (erc-track-list-changed . dw/on-erc-track-list-changed)
    :config
    ;; (require 'erc-desktop-notifications)
    :custom
    (erc-nick "lokesh1197")
    (erc-user-full-name "Lokesh Mohanty")
    (erc-prompt-for-password nil)
    (erc-auto-query 'bury)
    (erc-join-buffer 'bury)
    (erc-track-shorten-start 8)
    (erc-interpret-mirc-color t)
    (erc-rename-buffers t)
    (erc-kill-buffer-on-part t)
    ;; erc-track-exclude '("#twitter_daviwil")
    ;; (erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE" "AWAY"))
    (erc-track-enable-keybindings nil)
    (erc-track-visibility 'selected-visible) ; Only use the selected frame for visibility
    (erc-track-exclude-server-buffer t)
    ;; (erc-fill-column 120)
    (erc-fill-function 'erc-fill-static)
    (erc-fill-static-center 20)
    (erc-image-inline-rescale 300)
    (erc-server-reconnect-timeout 10)
    (erc-server-reconnect-attempts 5)
    (erc-autojoin-channels-alist '(("irc.libera.chat" "#systemcrafters" "#emacs" "#guix")))
    (erc-modules 
     '(netsplit fill button match track completion
                readonly networks ring autojoin noncommands
                irccontrols move-to-prompt stamp menu list autoaway
                smiley keep-place image hl-nicks))
    ;; (erc-quit-reason (lambda (s) (or s "Ejecting from cyberspace")))
    )

  ;; (add-hook 'erc-join-hook 'bitlbee-identify)
  ;; (defun bitlbee-identify ()
  ;;   "If we're on the bitlbee server, send the identify command to the &bitlbee channel."
  ;;   (when (and (string= "127.0.0.1" erc-session-server)
  ;;              (string= "&bitlbee" (buffer-name)))
  ;;     (erc-message "PRIVMSG" (format "%s identify %s"
  ;;                                    (erc-default-target)
  ;;                                    (password-store-get "IRC/Bitlbee")))))

  (defun my/connect-irc ()
    (interactive)
    (erc-tls :server "irc.libera.chat" :port 6697 :nick "lokesh1197"))
  ;; (erc
  ;;    :server "127.0.0.1" :port 6667
  ;;    :nick "daviwil" :password (password-store-get "IRC/Bitlbee")))

  ;; Thanks karthik!
  ;; (defun erc-image-create-image (file-name)
  ;;   "Create an image suitably scaled according to the setting of
  ;; 'ERC-IMAGE-RESCALE."
  ;;   (let* ((positions (window-inside-absolute-pixel-edges))
  ;;         (width (- (nth 2 positions) (nth 0 positions)))
  ;;         (height (- (nth 3 positions) (nth 1 positions)))
  ;;         (image (create-image file-name))
  ;;         (dimensions (image-size image t))
  ;;         (imagemagick-p (and (fboundp 'imagemagick-types) 'imagemagick)))
  ;;                                         ; See if we want to rescale the image
  ;;     (if (and erc-image-inline-rescale
  ;;             (not (image-multi-frame-p image)))
  ;;         ;; Rescale based on erc-image-rescale
  ;;         (cond (;; Numeric: scale down to that size
  ;;               (numberp erc-image-inline-rescale)
  ;;               (if (> (cdr dimensions) erc-image-inline-rescale)
  ;;                   (create-image file-name imagemagick-p nil :height erc-image-inline-rescale)
  ;;                 image))
  ;;               (;; 'window: scale down to window size, if bigger
  ;;               (eq erc-image-inline-rescale 'window)
  ;;               ;; But only if the image is greater than the window size
  ;;               (if (or (> (car dimensions) width)
  ;;                       (> (cdr dimensions) height))
  ;;                   ;; Figure out in which direction we need to scale
  ;;                   (if (> width height)
  ;;                       (create-image file-name imagemagick-p nil :height  height)
  ;;                     (create-image file-name imagemagick-p nil :width width))
  ;;                 ;; Image is smaller than window, just give that back
  ;;                 image))
  ;;               (t (progn (message "Error: none of the rescaling options matched") image)))
  ;;       ;; No rescale
  ;;       image)))
#+end_src

*** Sharing Files with 0x0

I use this nice package from [[https://gitlab.com/willvaughn][nackjicholson]] to make sharing files and images on IRC much easier.

#+begin_src emacs-lisp

  ;; (use-package 0x0
  ;;   :straight '(0x0 :host gitlab
  ;;                   :repo "willvaughn/emacs-0x0"))

#+end_src

** Matrix

[[https://github.com/alphapapa/ement.el][Ement]] is a [[https://matrix.org/][matrix]] client for Emacs.
[[https://github.com/alphapapa/plz.el][Plz]] is an http library for Emacs with curl as its backend. It is requried for ement.

#+begin_src emacs-lisp

  ;; (use-package plz
  ;;   :straight (plz :host github
  ;;                     :repo "alphapapa/plz.el"))

  ;; (use-package ement
  ;;   :straight (ement :host github
  ;;                     :repo "alphapapa/ement.el"))

#+end_src

* Gemini

#+begin_src emacs-lisp

  (use-package elpher)

#+end_src

* EMOJI

| emojify-apropos-copy-emoji      | Copy the emoji being displayed at current line in apropos results     |
| emojify-apropos-describe-emoji  | Copy the emoji being displayed at current line in apropos results     |
| emojify-apropos-emoji           | Show Emojis that match PATTERN                                        |
| emojify-delete-emoji-backward   | Delete emoji before point                                             |
| emojify-delete-emoji-forward    | Delete emoji after point                                              |
| emojify-describe-emoji          | Display description for EMOJI-TEXT                                    |
| emojify-describe-emoji-at-point | Display help for EMOJI displayed at point                             |
| emojify-download-emoji          | Download the provided EMOJI-SET                                       |
| emojify-insert-emoji            | Interactively prompt for Emojis and insert them in the current buffer |
| emojify-list-emojis             | List emojis in a tabulated view                                       |
| emojify-list-force-refresh      | Force emoji list to be refreshed                                      |

#+begin_src emacs-lisp

  (use-package emojify
    :hook (after-init . global-emojify-mode))

#+end_src

* CREDENTIAL MANAGEMENT

I use [[https://www.passwordstore.org/][pass]] to manage all of my passwords locally.  I also use [[https://github.com/DamienCassou/auth-password-store][auth-source-pass]] as the primary =auth-source= provider so that all passwords are stored in a single place.

#+begin_src emacs-lisp

  (setq auth-sources '("~/.authinfo.gpg" "~/.netrc"))

  (use-package password-store)

  ;; (use-package auth-source-pass
  ;;   :config
  ;;   (auth-source-pass-enable))

  ;; (use-package oauth2
  ;;   :straight t)

  ;; (leader-key
  ;;   "ap" '(:ignore t :which-key "pass")
  ;;   "app" 'password-store-copy
  ;;   "api" 'password-store-insert
  ;;   "apg" 'password-store-generate)

#+end_src

* Money Management

[[https://www.ledger-cli.org/][Ledger]] allows you to have a double-entry accounting system. It also helps in commodity tracking. [[https://github.com/ledger/ledger-mode][Ledger-mode]] package helps to edit these in emacs.
  
Tips from [[https://plaintextaccounting.org/][plain text accounting]]

- Virtual transactions -> ledger within an account
- Stock lot pricint -> designate basis or ot date
- Command Directives -> default accounts, etc.
- Balance assertions -> declare a balance at a date
- Asset allocation -> see bond/equity allocation

- Budgeting
- Forecasting
- Time Keeping

| C-c C-k           | copy transaction                             |
| C-c C-b           | calc buffer (y -> yang value at top of stack |
| C-c C-c / C-c C-e | clear transaction                            |
| C-c C-d           | delete transaction                           |
|-------------------+----------------------------------------------|
| C-c C-s           | sort transactions                            |
|                   | Mark Sort Begining                           |
|                   | Mark Sort End                                |
|-------------------+----------------------------------------------|
| C-c C-f           | narrow to regex                              |
| C-c C-g           | refresh the narrowed view                    |

- =ledger-copy-transaction-insert-blank-line-after=
  
I use [[https://hledger.org/import-csv.html][hledger]] to import .csv files using a .csv.rules file
*Eg*: import =backup.csv= by running =hledger -f backup.csv print=


#+begin_src emacs-lisp

  (use-package ledger-mode
    :straight nil
    :preface
    (defun my/ledger-save ()
      "Clean the ledger buffer at each save."
      (interactive)
      (ledger-mode-clean-buffer)
      (save-buffer))
    :bind (:map ledger-mode-map
                ("C-x C-s" . my/ledger-save))
    :hook (ledger-mode . ledger-flymake-enable)
    :custom
    ;; (ledger-clear-whole-transactions t)
    (ledger-reconcile-default-commodity "INR")
    ;; (ledger-reports
    ;;  '(("account statement" "%(binary) reg --real [[ledger-mode-flags]] -f %(ledger-file) ^%(account)")
    ;;    ("balance sheet" "%(binary) --real [[ledger-mode-flags]] -f %(ledger-file) bal ^assets ^liabilities ^equity")
    ;;    ("budget" "%(binary) --empty -S -T [[ledger-mode-flags]] -f %(ledger-file) bal ^assets:bank ^assets:receivables ^assets:cash ^assets:budget")
    ;;    ("budget goals" "%(binary) --empty -S -T [[ledger-mode-flags]] -f %(ledger-file) bal ^assets:bank ^assets:receivables ^assets:cash ^assets:'budget goals'")
    ;;    ("budget obligations" "%(binary) --empty -S -T [[ledger-mode-flags]] -f %(ledger-file) bal ^assets:bank ^assets:receivables ^assets:cash ^assets:'budget obligations'")
    ;;    ("budget debts" "%(binary) --empty -S -T [[ledger-mode-flags]] -f %(ledger-file) bal ^assets:bank ^assets:receivables ^assets:cash ^assets:'budget debts'")
    ;;    ("cleared" "%(binary) cleared [[ledger-mode-flags]] -f %(ledger-file)")
    ;;    ("equity" "%(binary) --real [[ledger-mode-flags]] -f %(ledger-file) equity")
    ;;    ("income statement" "%(binary) --invert --real -S -T [[ledger-mode-flags]] -f %(ledger-file) bal ^income ^expenses -p \"this month\""))
    ;;  (ledger-report-use-header-line nil))
    )

#+end_src

Finally, to provides a =flychecker= checker for Ledger files, you can use
[[https://github.com/purcell/flycheck-ledger][flycheck-ledger]].

#+begin_src emacs-lisp

  ;; (use-package flycheck-ledger :after ledger-mode)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "ledger"
  "emacs-ledger"

#+end_src

* GUIX

[[https://github.com/alezost/guix.el][Guix]] documentation is helpful. Further info is available in the info manual

#+begin_src emacs-lisp

  (use-package guix)

#+end_src

* CUSTOM MACROS

- =name-last-kbd-macro=
- =insert-last-kbd-macro=

#+begin_src emacs-lisp

  (load-file (expand-file-name
              "temporary.el" user-emacs-directory))

#+end_src

* UNSET DEBUGGING

Taken from [[https://jonathanabennett.github.io/blog/2019/05/28/emacs.org-~-may-2019/][Jonathan Bennett's Emacs.org]]

#+begin_src emacs-lisp

  (setq debug-on-error nil)
  (setq debug-on-quit nil)

  ;; (let ((elapsed (float-time (time-subtract (current-time)
  ;;                                           emacs-start-time))))
  ;;   (message "Loading settings...done (%.3fs)" elapsed))
  ;; (put 'narrow-to-region 'disabled nil)

#+end_src

* TO TRY
** TODO Emacs Packages
:LOGBOOK:
- Note taken on [2021-10-27 Wed 21:45] \\
  Worf: not working
- Note taken on [2021-10-27 Wed 13:46] \\
  Weechat Not working
:END:
- [X] evil-snipe
- [X] evil-mark-replace
- [X] evil-exchange
- [X] [[https://github.com/karthink/popper][popper]] (manage popups)
- [ ] [[https://github.com/hpdeifel/synosaurus][Thesaurus]]
- [ ] [[https://www.flycheck.org/en/latest/index.html][Flycheck]]
- [X] [[https://github.com/abo-abo/worf][Worf]] (vi like keybindings for speed org file management)
- [ ] [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug.html][Edebug]] (source-level debugger for emacs lisp programs)
- [X] [[https://github.com/the-kenny/weechat.el][Weechat]] (as an alternative to erc due to sasl)
- [X] [[https://github.com/alezost/guix.el][Emacs guix]] (manage guix packages from within emacs)
** DONE Get Mail on the fly with imapnotify
CLOSED: [2021-11-12 Fri 18:34]
:LOGBOOK:
- State "DONE"       from "BACKLOG"    [2021-11-12 Fri 18:34]
- State "BACKLOG"    from "TODO"       [2021-10-23 Sat 20:20]
:END:
- [X] [[https://0x7b2.net/posts/2021/exploring-email-with-emacs/][Goimapnotify]]
- [ ] [[https://tecosaur.github.io/emacs-config/config.html#mail][Tecosaur mail config]]
** BACKLOG Add built-in functions to my work-flow
:LOGBOOK:
- State "BACKLOG"    from "TODO"       [2021-10-28 Thu 16:35]
- State "TODO"       from              [2021-10-24 Sun 10:31]
:END:
* REFERENCES
** Configs
*** REFERENCE [[https://jonathanabennett.github.io/blog/2019/05/28/emacs.org-~-may-2019/][Jonathan Bennett's Emacs.org]]
CLOSED: [2021-10-22 Fri 11:39]
:LOGBOOK:
- State "REFERENCE"  from              [2021-10-22 Fri 11:39]
:END:

*** CONSUME [[https://ogbe.net/emacs/emacs.html][Denis Ogbe's Config]]
:LOGBOOK:
- State "CONSUME"    from              [2021-10-22 Fri 11:38]
:END:
*** CONSUMING [[https://github.com/rememberYou/.emacs.d/blob/master/config.org][Terencio Agozzino's Config]]
:LOGBOOK:
- State "CONSUMING"  from "CONSUME"    [2021-10-23 Sat 17:36]
- State "CONSUME"    from              [2021-10-23 Sat 13:56]
:END:
*** CONSUME [[https://git.jeremydormitzer.com/jdormit/dotfiles/src/branch/master/emacs/.emacs.d/config/init-email.el][Jeremy Dormitzer's Mu4e Config]]
:LOGBOOK:
- State "CONSUME"    from              [2021-10-23 Sat 20:08]
:END:
*** CONSUME [[https://github.com/karthink/.emacs.d][Karthik's config]]
:LOGBOOK:
- State "CONSUME"    from              [2021-10-24 Sun 11:19]
:END:

*** CONSUME [[https://ogbe.net/emacs/emacs.html][Denis Ogbe's Config]]
:LOGBOOK:
- State "CONSUME"    from              [2021-10-22 Fri 11:38]
:END:
** Blogs
*** REFERENCE [[https://gitlab.com/dwt1/dotfiles/-/blob/master/.emacs.d.gnu/config.org][Distrotube's GNU Emacs]]
CLOSED: [2021-10-22 Fri 11:40]
:LOGBOOK:
- State "REFERENCE"  from              [2021-10-22 Fri 11:40]
:END:
*** CONSUMING [[https://www.youtube.com/c/systemcrafters][System Crafters]]
:LOGBOOK:
- State "CONSUMING"  from              [2021-10-22 Fri 11:40]
:END:
**** CONSUMING [[https://www.youtube.com/playlist?list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ][Emacs from Scratch]]
:LOGBOOK:
- State "CONSUMING"  from "REFERENCE"  [2021-10-22 Fri 11:39]
- State "REFERENCE"  from              [2021-10-22 Fri 11:39]
:END:
**** CONSUMING [[https://www.youtube.com/playlist?list=PLEoMzSkcN8oM-kA19xOQc8s0gr0PpFGJQ][Emacs Mail]]
:LOGBOOK:
- State "CONSUMING"  from "REFERENCE"  [2021-10-22 Fri 11:39]
- State "REFERENCE"  from              [2021-10-22 Fri 11:39]
:END:
**** REFERENCE [[https://www.youtube.com/playlist?list=PLEoMzSkcN8oNvsrtk_iZSb94krGRofFjN][Emacs IDE]]
CLOSED: [2021-10-22 Fri 11:39]
:LOGBOOK:
- State "REFERENCE"  from              [2021-10-22 Fri 11:39]
:END:
**** REFERENCE [[https://www.youtube.com/playlist?list=PLEoMzSkcN8oMc34dTjyFmTUWbXTKrNfZA][Mastering Git with Magit]]
CLOSED: [2021-10-22 Fri 11:39]
:LOGBOOK:
- State "REFERENCE"  from              [2021-10-22 Fri 11:39]
:END:

*** REFERENCE [[https://www.youtube.com/playlist?list=PLhXZp00uXBk4np17N39WvB80zgxlZfVwj][Zaiste Programming: DoomCasts]]
CLOSED: [2021-10-22 Fri 11:38]
:LOGBOOK:
- State "REFERENCE"  from              [2021-10-22 Fri 11:38]
:END:
*** CONSUME [[https://karthinks.com/software/fifteen-ways-to-use-embark/][Karthik's Blog for Embark]]
:LOGBOOK:
- State "CONSUME"    from              [2021-10-24 Sun 10:39]
:END:
*** CONSUME [[https://oremacs.com/][Oleh Krehel's Blog (abo-abo)]]
:LOGBOOK:
- State "CONSUME"    from              [2021-10-23 Sat 10:52]
:END:
** CONSUME Others 
:LOGBOOK:
- State "CONSUME"    from "TODO"       [2021-10-24 Sun 10:31]
:END:
- [X] [[https://github.com/daviwil/emacs-from-scratch][EFS Tutorial]]
- [ ] [[https://cestlaz.github.io/stories/emacs/][EFS Reference]]
- [ ] [[github.com/nloyola/.emacs.d/blob/master/config.org][Nloyola Emacs Reference]]
- [ ] [[github.com/emacs-tw/awesome-emacs][Awesome Emacs]]
- [ ] [[https://opensource.com/article/20/1/emacs-cheat-sheet][Extending Emacs]]
  
  
